openapi: 3.0.4
info:
  title: Tag Management System API
  version: 0.1.1
  description: |
    The **Tag Management System API** provides RESTful access to all tag-related operations—creation, updates, deletion, linking, and querying of tags and their relationships.
    It also supports metadata assignment for tagged entities such as images, documents, or video stills.

    ## Principles
    - **RESTful architecture** — resource-based URIs and standard HTTP verbs (GET, POST, PATCH, DELETE)
    - **JSON payloads** — all requests and responses use JSON
    - **Frontend-controlled authentication** — only frontend clients (CLI, UI) interact with the API through validated tokens (except for development/testing)

servers:
  - url: http://localhost:8000/api/v1
    description: Local development

tags:
  - name: tags
    description: Manage tags, aliases, compositions, and relationships
  - name: tags:tag-specific
    description: Tag-scoped relationship operations (e.g., `/tags/{id}/relationships`)
  - name: tags:system-wide
    description: Global tag management (e.g., `/tag-relationships`)
  - name: entities
    description: Manage entities and their assigned tags
  - name: utilities
    description: Retrieve shared lookup data such as contexts, parts of speech, rating types, and ratings
  - name: ui
    description: Retrieve UI layout configurations
  - name: meta
    description: Service metadata and health endpoints

paths:
  ######################################
  # META
  ######################################

  /meta/health:
    get:
      tags: [meta]
      summary: Health check
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  ######################################
  # TAGS
  ######################################

  /tags:
    post:
      tags: [tags]
      summary: Create a new tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagInput"
      responses:
        "201":
          description: Tag created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Tag already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags: [tags]
      summary: List all tags
      parameters:
        - in: query
          name: limit
          schema: { type: integer, example: 25 }
        - in: query
          name: offset
          schema: { type: integer, example: 0 }
      responses:
        "200":
          description: Paginated list of tags
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Tag"

  /tags/{id}:
    get:
      tags: [tags]
      summary: Retrieve tag by ID
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: Tag found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags]
      summary: Update tag metadata
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagInput"
      responses:
        "200":
          description: Tag updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags]
      summary: Delete a tag
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: Tag deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/aliases:
    get:
      tags: [tags, tags:tag-specific]
      summary: List aliases for a tag
      description: |
        Retrieve all alias names that belong to this tag. Each alias points to this tag as its canonical reference.
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: List of aliases for the tag
          content:
            application/json:
              schema:
                type: object
                properties:
                  aliases:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagAlias"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags: [tags, tags:tag-specific]
      summary: Create alias for a tag
      description: |
        Adds a new alias for this tag. The alias must be unique across the entire system.
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, description: "The alias name to create" }
      responses:
        "201":
          description: Alias created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
        "400":
          description: Invalid input or duplicate alias
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags, tags:tag-specific]
      summary: Bulk update aliases for a tag
      description: |
        Updates all aliases for this tag. Existing aliases may be replaced with a new set of names.
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AliasUpdate"
      responses:
        "200":
          description: Aliases updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_id: { type: string, format: uuid }
                  aliases:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagAlias"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags, tags:tag-specific]
      summary: Delete all aliases for a tag
      description: |
        Deletes every alias associated with this tag. Use cautiously — all linked alias names will be removed.
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: Aliases deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tag-aliases:
    get:
      tags: [tags, tags:system-wide]
      summary: List all tag aliases
      description: |
        Retrieve all aliases across the system. Supports optional filtering by canonical `tag_id`.
      parameters:
        - in: query
          name: tag_id
          schema: { type: string, format: uuid }
          description: Filter aliases belonging to a specific tag
      responses:
        "200":
          description: List of tag aliases
          content:
            application/json:
              schema:
                type: object
                properties:
                  aliases:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagAlias"

    post:
      tags: [tags, tags:system-wide]
      summary: Create a tag alias
      description: |
        Creates a new alias and links it to a specific tag. The alias name must be unique across the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                tag_id: { type: string, format: uuid }
      responses:
        "201":
          description: Alias created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
        "400":
          description: Invalid input or duplicate alias
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tag-aliases/{id}:
    get:
      tags: [tags, tags:system-wide]
      summary: Retrieve alias by ID
      description: Retrieve a specific tag alias by its unique ID.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Alias found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
        "404":
          description: Alias not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags, tags:system-wide]
      summary: Update alias
      description: |
        Updates the alias name or reassigns it to a different canonical tag.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                tag_id: { type: string, format: uuid }
      responses:
        "200":
          description: Alias updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
        "404":
          description: Alias not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags, tags:system-wide]
      summary: Delete alias
      description: Deletes a tag alias by its unique ID.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Alias deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Alias not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/relationships:
    get:
      tags: [tags, tags:tag-specific]
      summary: List relationships for a tag
      description: |
        Retrieve all relationships where this tag acts as **Tag A** (the dominant/source).
        Use the optional `direction` query parameter to fetch relationships where this tag
        is either the **source** or the **target**.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - in: query
          name: direction
          schema:
            type: string
            enum: [outgoing, incoming]
            default: outgoing
          description: |
            Controls directionality of the relationships.
            - `outgoing`: tag acts as **Tag A**
            - `incoming`: tag acts as **Tag B**
      responses:
        "200":
          description: List of tag relationships
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationships:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagRelationship"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags: [tags, tags:tag-specific]
      summary: Create a relationship for a tag
      description: |
        Creates a new relationship originating from this tag as **Tag A**.
        The request body specifies the related tag (`tag_b_id`) and the `relationship_type_id`.
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagRelationshipInput"
      responses:
        "201":
          description: Relationship created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags, tags:tag-specific]
      summary: Update relationships for a tag
      description: |
        Bulk update of relationships where this tag is the **source (Tag A)**.
        Typically used to modify multiple related tags or relationship types at once.
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RelationshipUpdate"
      responses:
        "200":
          description: Relationships updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationships:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagRelationship"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags, tags:tag-specific]
      summary: Delete relationships for a tag
      description: |
        Deletes all relationships where this tag is **Tag A** (the source).
        Use with caution — this removes every outgoing relationship for this tag.
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: Relationships deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tag-relationships:
    get:
      tags: [tags, tags:system-wide]
      summary: List all tag relationships
      description: |
        Retrieve all tag relationships in the system.
        Supports optional filters for `tag_a_id`, `tag_b_id`, and `relationship_type_id`.
      parameters:
        - in: query
          name: tag_a_id
          schema: { type: string, format: uuid }
          description: Filter relationships by source tag
        - in: query
          name: tag_b_id
          schema: { type: string, format: uuid }
          description: Filter relationships by target tag
        - in: query
          name: relationship_type_id
          schema: { type: string, format: uuid }
          description: Filter relationships by type
      responses:
        "200":
          description: List of tag relationships
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationships:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagRelationship"

    post:
      tags: [tags, tags:system-wide]
      summary: Create a tag relationship
      description: |
        Creates a new tag relationship. Both `tag_a_id` (source) and `tag_b_id` (target)
        must be provided explicitly in the request body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagRelationship"
      responses:
        "201":
          description: Tag relationship created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tag-relationships/{id}:
    get:
      tags: [tags, tags:system-wide]
      summary: Retrieve a tag relationship by ID
      description: Returns a single tag relationship resource.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier of the tag relationship
      responses:
        "200":
          description: Relationship found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
        "404":
          description: Relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags, tags:system-wide]
      summary: Update a tag relationship
      description: |
        Updates the `relationship_type_id` or `description` of a relationship.
        `tag_a_id` and `tag_b_id` may not be changed after creation.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                relationship_type_id: { type: string, format: uuid }
                description: { type: string }
      responses:
        "200":
          description: Relationship updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
        "404":
          description: Relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags, tags:system-wide]
      summary: Delete a tag relationship
      description: Permanently deletes a tag relationship by its unique ID.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Relationship deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/compositions:
    get:
      tags: [tags]
      summary: Get tag composition components
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: List of tag components
          content:
            application/json:
              schema:
                type: object
                properties:
                  components:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagComponent"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags]
      summary: Update tag composition components
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompositionUpdate"
      responses:
        "200":
          description: Updated tag components
          content:
            application/json:
              schema:
                type: object
                properties:
                  base_tag_id: { type: string, format: uuid }
                  components:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagComponent"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/ratings:
    patch:
      tags: [tags]
      summary: Rate tag in context
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContextualRatingUpdate"
      responses:
        "200":
          description: Contextual ratings applied
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_id: { type: string, format: uuid }
                  ratings:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagContextualRatingInput"
        "404":
          description: Tag or context not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/relationship_ratings:
    patch:
      tags: [tags]
      summary: Rate tag relationships
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RelationshipRatingUpdate"
      responses:
        "200":
          description: Relationship ratings recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_a_id: { type: string, format: uuid }
                  ratings:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagRelationshipRatingInput"
        "404":
          description: Tag or related tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  ######################################
  # ENTITIES
  ######################################

  /entities:
    post:
      tags: [entities]
      summary: Create a new entity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityInput"
      responses:
        "201":
          description: Entity created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags: [entities]
      summary: List all entities
      parameters:
        - in: query
          name: limit
          schema: { type: integer, example: 25 }
        - in: query
          name: offset
          schema: { type: integer, example: 0 }
      responses:
        "200":
          description: Paginated list of entities
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Entity"

  /entities/{id}:
    get:
      tags: [entities]
      summary: Retrieve entity by ID
      parameters:
        - $ref: "#/components/parameters/EntityId"
      responses:
        "200":
          description: Entity found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities]
      summary: Update an entity
      parameters:
        - $ref: "#/components/parameters/EntityId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityInput"
      responses:
        "200":
          description: Entity updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [entities]
      summary: Delete an entity
      parameters:
        - $ref: "#/components/parameters/EntityId"
      responses:
        "200":
          description: Entity deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/tags:
    get:
      tags: [entities]
      summary: List tags assigned to an entity
      parameters:
        - $ref: "#/components/parameters/EntityId"
      responses:
        "200":
          description: Tag assignments
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityTagAssignment"
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities]
      summary: Assign or unassign tags to entity
      parameters:
        - $ref: "#/components/parameters/EntityId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityTagUpdate"
      responses:
        "200":
          description: Tags updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  entity_id: { type: string, format: uuid }
                  tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityTagAssignment"
        "404":
          description: Entity or tags not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/purpose:
    patch:
      tags: [entities]
      summary: Update purpose(s) for an entity
      parameters:
        - $ref: "#/components/parameters/EntityId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityPurposeUpdate"
      responses:
        "200":
          description: Updated purposes
          content:
            application/json:
              schema:
                type: object
                properties:
                  entity_id: { type: string, format: uuid }
                  purposes:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityPurposeInput"
        "404":
          description: Entity or purpose tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/relationships:
    get:
      tags: [entities]
      summary: Retrieve entity relationships
      parameters:
        - $ref: "#/components/parameters/EntityId"
      responses:
        "200":
          description: Related entities
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationships:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityRelationship"
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities]
      summary: Update entity relationships
      parameters:
        - $ref: "#/components/parameters/EntityId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipUpdate"
      responses:
        "200":
          description: Relationships updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  entity_a_id: { type: string, format: uuid }
                  relationships:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityRelationshipInput"
        "404":
          description: Entity or target not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  ######################################
  # UTILITIES
  ######################################

  /contexts:
    get:
      tags: [utilities]
      summary: Retrieve all tagging contexts
      responses:
        "200":
          description: List of contexts
          content:
            application/json:
              schema:
                type: object
                properties:
                  contexts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Context"
    post:
      tags: [utilities]
      summary: Create a new tagging context
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContextInput"
      responses:
        "201":
          description: Context created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Context"
  /contexts/{id}:
    patch:
      tags: [utilities]
      summary: Update a tagging context
      parameters:
        - $ref: "#/components/parameters/ContextId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContextInput"
      responses:
        "200":
          description: Context updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Context"
    delete:
      tags: [utilities]
      summary: Delete a tagging context
      parameters:
        - $ref: "#/components/parameters/ContextId"
      responses:
        "200":
          description: Context deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

  /parts-of-speech:
    get:
      tags: [utilities]
      summary: Retrieve all parts of speech
      responses:
        "200":
          description: List of parts of speech
          content:
            application/json:
              schema:
                type: object
                properties:
                  parts_of_speech:
                    type: array
                    items:
                      $ref: "#/components/schemas/PartOfSpeech"
    post:
      tags: [utilities]
      summary: Create a new part of speech
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartOfSpeechInput"
      responses:
        "201":
          description: Part of speech created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartOfSpeech"
  /parts-of-speech/{id}:
    patch:
      tags: [utilities]
      summary: Update a part of speech
      parameters:
        - $ref: "#/components/parameters/PartOfSpeechId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartOfSpeechInput"
      responses:
        "200":
          description: Part of speech updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartOfSpeech"
    delete:
      tags: [utilities]
      summary: Delete a part of speech
      parameters:
        - $ref: "#/components/parameters/PartOfSpeechId"
      responses:
        "200":
          description: Part of speech deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

  /ratings:
    get:
      tags: [utilities]
      summary: Retrieve all ratings
      responses:
        "200":
          description: List of ratings
          content:
            application/json:
              schema:
                type: object
                properties:
                  ratings:
                    type: array
                    items:
                      $ref: "#/components/schemas/Rating"
    post:
      tags: [utilities]
      summary: Create a new rating
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingInput"
      responses:
        "201":
          description: Rating created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
  /ratings/{id}:
    patch:
      tags: [utilities]
      summary: Update a rating
      parameters:
        - $ref: "#/components/parameters/RatingId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingInput"
      responses:
        "200":
          description: Rating updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
    delete:
      tags: [utilities]
      summary: Delete a rating
      parameters:
        - $ref: "#/components/parameters/RatingId"
      responses:
        "200":
          description: Rating deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

  /rating-types:
    get:
      tags: [utilities]
      summary: Retrieve all rating types
      responses:
        "200":
          description: List of rating types
          content:
            application/json:
              schema:
                type: object
                properties:
                  rating_types:
                    type: array
                    items:
                      $ref: "#/components/schemas/RatingType"
    post:
      tags: [utilities]
      summary: Create a new rating type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingTypeInput"
      responses:
        "201":
          description: Rating type created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingType"
  /rating-types/{id}:
    patch:
      tags: [utilities]
      summary: Update a rating type
      parameters:
        - $ref: "#/components/parameters/RatingTypeId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingTypeInput"
      responses:
        "200":
          description: Rating type updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingType"
    delete:
      tags: [utilities]
      summary: Delete a rating type
      parameters:
        - $ref: "#/components/parameters/RatingTypeId"
      responses:
        "200":
          description: Rating type deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

  ######################################
  # UI CONFIGURATIONS
  ######################################

  /ui/layouts:
    get:
      tags: [ui]
      summary: Retrieve all UI layouts
      responses:
        "200":
          description: List of UI layouts
          content:
            application/json:
              schema:
                type: object
                properties:
                  ui_layouts:
                    type: array
                    items:
                      $ref: "#/components/schemas/UiLayout"
    post:
      tags: [ui]
      summary: Create a new UI layout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiLayoutInput"
      responses:
        "201":
          description: UI layout created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiLayout"
  /ui/layouts/{id}:
    patch:
      tags: [ui]
      summary: Update a UI layout
      parameters:
        - $ref: "#/components/parameters/UiLayoutId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiLayoutInput"
      responses:
        "200":
          description: UI layout updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiLayout"
    delete:
      tags: [ui]
      summary: Delete a UI layout
      parameters:
        - $ref: "#/components/parameters/UiLayoutId"
      responses:
        "200":
          description: UI layout deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

  /ui/groups:
    get:
      tags: [ui]
      summary: Retrieve all UI groups
      responses:
        "200":
          description: List of UI groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  ui_groups:
                    type: array
                    items:
                      $ref: "#/components/schemas/UiGroup"
    post:
      tags: [ui]
      summary: Create a new UI group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiGroupInput"
      responses:
        "201":
          description: UI group created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiGroup"
  /ui/groups/{id}:
    patch:
      tags: [ui]
      summary: Update a UI group
      parameters:
        - $ref: "#/components/parameters/UiGroupId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiGroupInput"
      responses:
        "200":
          description: UI group updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiGroup"
    delete:
      tags: [ui]
      summary: Delete a UI group
      parameters:
        - $ref: "#/components/parameters/UiGroupId"
      responses:
        "200":
          description: UI group deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

  /ui/fields:
    get:
      tags: [ui]
      summary: Retrieve all UI fields
      responses:
        "200":
          description: List of UI fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  ui_fields:
                    type: array
                    items:
                      $ref: "#/components/schemas/UiField"
    post:
      tags: [ui]
      summary: Create a new UI field
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiFieldInput"
      responses:
        "201":
          description: UI field created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiField"
  /ui/fields/{id}:
    patch:
      tags: [ui]
      summary: Update a UI field
      parameters:
        - $ref: "#/components/parameters/UiFieldId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiFieldInput"
      responses:
        "200":
          description: UI field updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiField"
    delete:
      tags: [ui]
      summary: Delete a UI field
      parameters:
        - $ref: "#/components/parameters/UiFieldId"
      responses:
        "200":
          description: UI field deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

######################################
# COMPONENTS
######################################

components:
  parameters:
    TagId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
      description: Unique identifier for the tag
    EntityId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
      description: Unique identifier for the entity
    UiLayoutId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
      description: Unique identifier for the UI layout
    ContextId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
    PartOfSpeechId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
    RatingTypeId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
    RatingId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
    UiGroupId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
    UiFieldId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }

  schemas:
    ErrorResponse:
      type: object
      properties:
        code: { type: integer, example: 404 }
        message: { type: string, example: "Resource not found" }
        details: { type: object }
      required: [code, message]

    PaginatedResponse:
      type: object
      properties:
        results: { type: array, items: {} }
        total: { type: integer, example: 42 }

    # ---- Tags
    Tag:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        display_name: { type: string }
        metadata: { type: object }
        part_of_speech_id: { type: string, format: uuid }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
      example:
        id: "a123e456-78b9-4cde-8123-456789abcdef"
        name: "dog"
        display_name: "Dog"
        metadata: { source: "Label Studio" }

    TagInput:
      type: object
      required: [name]
      properties:
        name: { type: string }
        display_name: { type: string }
        metadata: { type: object }
        part_of_speech_id: { type: string, format: uuid }

    TagAlias:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }

    AliasUpdate:
      type: object
      properties:
        aliases:
          type: array
          items: { type: string }

    TagRelationship:
      type: object
      properties:
        tag_a_id: { type: string, format: uuid }
        tag_b_id: { type: string, format: uuid }
        relationship_type_id: { type: string, format: uuid }
        description: { type: string }

    TagRelationshipInput:
      type: object
      properties:
        tag_b_id: { type: string, format: uuid }
        relationship_type_id: { type: string, format: uuid }
        description: { type: string }

    RelationshipUpdate:
      type: object
      properties:
        relationships:
          type: array
          items:
            $ref: "#/components/schemas/TagRelationshipInput"

    TagComponent:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        position: { type: integer }

    TagComponentInput:
      type: object
      properties:
        id: { type: string, format: uuid }
        position: { type: integer }

    CompositionUpdate:
      type: object
      properties:
        components:
          type: array
          items:
            $ref: "#/components/schemas/TagComponentInput"

    TagContextualRatingInput:
      type: object
      properties:
        context_id: { type: string, format: uuid }
        rating_id: { type: string, format: uuid }
        user_id: { type: string, format: uuid }

    ContextualRatingUpdate:
      type: object
      properties:
        contextual_ratings:
          type: array
          items:
            $ref: "#/components/schemas/TagContextualRatingInput"

    TagRelationshipRatingInput:
      type: object
      properties:
        tag_b_id: { type: string, format: uuid }
        context_id: { type: string, format: uuid }
        rating_id: { type: string, format: uuid }

    RelationshipRatingUpdate:
      type: object
      properties:
        relationship_ratings:
          type: array
          items:
            $ref: "#/components/schemas/TagRelationshipRatingInput"

    # ---- Entities
    Entity:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        location: { type: string }
        is_primary: { type: boolean }
        metadata: { type: object }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    EntityInput:
      type: object
      required: [name]
      properties:
        name: { type: string }
        location: { type: string }
        is_primary: { type: boolean }
        metadata: { type: object }

    EntityTagAssignment:
      type: object
      properties:
        tag: { $ref: "#/components/schemas/Tag" }
        context_id: { type: string, format: uuid }
        metadata: { type: object }

    EntityTagAssignmentInput:
      type: object
      properties:
        tag_id: { type: string, format: uuid }
        context_id: { type: string, format: uuid }
        metadata: { type: object }

    EntityTagUpdate:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: "#/components/schemas/EntityTagAssignmentInput"

    EntityPurposeInput:
      type: object
      properties:
        purpose_tag_id: { type: string, format: uuid }
        is_primary: { type: boolean }

    EntityPurposeUpdate:
      type: object
      properties:
        purposes:
          type: array
          items:
            $ref: "#/components/schemas/EntityPurposeInput"

    EntityRelationship:
      type: object
      description: |
        Directionality semantics:
        - entity_a_id — source/primary entity
        - entity_b_id — alternate/derived entity
      properties:
        entity_a_id: { type: string, format: uuid }
        entity_b_id: { type: string, format: uuid }
        relationship_type_id: { type: string, format: uuid }

    EntityRelationshipInput:
      type: object
      properties:
        entity_b_id: { type: string, format: uuid }
        relationship_type_id: { type: string, format: uuid }

    EntityRelationshipUpdate:
      type: object
      properties:
        relationships:
          type: array
          items:
            $ref: "#/components/schemas/EntityRelationshipInput"

    # ---- Utilities
    Context:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        classification_type: { type: string, enum: [objective, subjective] }
        description: { type: string }
        is_active: { type: boolean }
    ContextInput:
      type: object
      properties:
        name: { type: string }
        classification_type: { type: string, enum: [objective, subjective] }
        description: { type: string }
        is_active: { type: boolean }

    PartOfSpeech:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        description: { type: string }
        is_active: { type: boolean }
    PartOfSpeechInput:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        is_active: { type: boolean }

    RatingType:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        is_normalized: { type: boolean }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    RatingTypeInput:
      type: object
      properties:
        name: { type: string }
        is_normalized: { type: boolean }

    Rating:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        score: { type: integer }
        description: { type: string }
        rating_type_id: { type: string, format: uuid }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    RatingInput:
      type: object
      properties:
        name: { type: string }
        score: { type: integer }
        description: { type: string }
        rating_type_id: { type: string, format: uuid }

    UiLayout:
      type: object
      description: |
        A layout configuration profile defining how tags are grouped in the UI.
        Linked to a purpose tag (optional) and composed of multiple UI fields.

      properties:
        id: { type: string, format: uuid }
        purpose_tag_id: { type: string, format: uuid, nullable: true }
        name: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    UiLayoutInput:
      type: object
      properties:
        purpose_tag_id: { type: string, format: uuid, nullable: true }
        name: { type: string }

    UiGroup:
      type: object
      description: A named grouping label for UI sections (e.g., "Photographer", "Ingredients").

      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    UiGroupInput:
      type: object
      properties:
        name: { type: string }

    UiField:
      type: object
      description: |
        A field within a UI layout defining how tags under a given context and category are grouped.

      properties:
        id: { type: string, format: uuid }
        ui_layout_id: { type: string, format: uuid }
        ui_group_id: { type: string, format: uuid }
        context_id: { type: string, format: uuid }
        category_tag_id: { type: string, format: uuid }
        sort_order: { type: integer }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    UiFieldInput:
      type: object
      properties:
        ui_layout_id: { type: string, format: uuid }
        ui_group_id: { type: string, format: uuid }
        context_id: { type: string, format: uuid }
        category_tag_id: { type: string, format: uuid }
        sort_order: { type: integer }
