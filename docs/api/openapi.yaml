openapi: 3.0.4
info:
  title: Tag Management System API
  version: 0.1.1
  description: |
    The **Tag Management System API** provides RESTful access to all tag-related operations—creation, updates, deletion, linking, and querying of tags and their relationships.
    It also supports metadata assignment for tagged entities such as images, documents, or video stills.

    ## Principles
    - **RESTful architecture** — resource-based URIs and standard HTTP verbs (GET, POST, PATCH, DELETE)
    - **JSON payloads** — all requests and responses use JSON
    - **Frontend-controlled authentication** — only frontend clients (CLI, UI) interact with the API through validated tokens (except for development/testing)

servers:
  - url: http://localhost:8000/api/v1
    description: Local development

tags:
  - name: meta
    description: Endpoints providing service metadata, uptime information, and system health diagnostics.
  - name: tags:core
    description: Core CRUD endpoints for managing tag records, each representing an atomic or composite labeling concept.
  - name: tags:aliases
    description: Manage aliases for a specific tag, allowing alternative names or synonyms for improved tagging and search flexibility.
  - name: tags:aliases:system
    description: System-wide alias management for creating, editing, and listing aliases across all tags.
  - name: tags:relationships
    description: Manage relationships where the current tag acts as Tag A, defining hierarchical or associative links like “Vehicle → Car.”
  - name: tags:relationships:system
    description: System-wide relationship management for maintaining all tag connections and traversing hierarchical or associative structures.
  - name: tags:compositions
    description: Manage component tags that form composite phrases for a base tag, defining structure in multi-word tags like “very big red car.”
  - name: tags:compositions:system
    description: System-wide management of composite tag records linking base tags to their component tags.
  - name: tags:ratings
    description: Apply, view, or update contextual ratings for tags to capture subjective or objective evaluations like likeness or clarity.
  - name: tags:relationship_ratings
    description: Manage ratings applied to tag relationships, measuring connection strength or relevance (e.g., “Dog → Animal” = 0.95).
  - name: entities:core
    description: Core entity CRUD endpoints for managing digital or physical assets that can be tagged, rated, or related to other entities.
  - name: entities:tags
    description: Endpoints for assigning, updating, or removing tags from entities, including contextual tagging under defined semantic domains.
  - name: entities:relationships
    description: Manage entity-to-entity relationships where the current entity acts as the source, such as derivations or alternates.
  - name: entities:relationships:system
    description: System-wide endpoints for listing, creating, and modifying relationships between any entities across the database.
  - name: entities:relationship_ratings
    description: Manage contextual ratings applied to specific entity-to-entity relationships, measuring qualities like confidence or relevance.
  - name: entities:relationship_ratings:system
    description: Global endpoints for viewing, creating, and updating entity relationship ratings across all entities.
  - name: entities:ratings
    description: Endpoints for applying or managing contextual ratings directly on entities, representing evaluations like quality or completeness.
  - name: entities:ratings:system
    description: System-wide endpoints for listing, creating, and updating ratings applied to entities across the database.
  - name: entities:purposes
    description: Manage purpose tags assigned to entities, defining their intended role or function within a workflow or collection.
  - name: entities:purposes:system
    description: Global endpoints for managing all purpose tag assignments across entities, including primary and secondary designations.
  - name: entities:versions
    description: Manage version relationships between entities, representing alternates, revisions, or derived versions through self-referential links.
  - name: entities:versions:system
    description: System-wide endpoints for managing all version-type relationships, enabling traversal of entity lineage and version history.
  - name: utilities:part-of-speech
    description: Manage grammatical classifications of tags, such as nouns, adjectives, and adverbs, which govern composition and validation logic.
  - name: utilities:contexts
    description: Manage semantic contexts that define how tags, entities, and ratings are grouped and interpreted within specific domains.
  - name: utilities:ratings:system
    description: Manage the global rating schema including rating types, scales, and definitions used for tag, entity, and relationship evaluations.
  - name: utilities:versioning
    description: Provide metadata and logic for tracking entity and tag versions over time, enabling reconstruction of lineage and alternates.
  - name: ui:layouts
    description: Manage UI layout profiles that organize tags, groups, and contexts for structured presentation in user interfaces.
  - name: ui:groups
    description: Define reusable UI grouping elements that segment layouts into labeled sections for improved visual organization.
  - name: ui:fields
    description: Manage individual UI fields that map tags or contexts to specific regions within layouts, determining display and behavior.
  - name: utilities
    description: Shared reference data including contexts, ratings, and grammatical metadata that add semantic structure to tags and entities.
  - name: ui
    description: Manage user interface configuration endpoints that define how tagging and context data appear within the application.

x-tagGroups:
  - name: Meta
    tags:
      - meta

  - name: Tags
    tags:
      - tags:core
      - tags:aliases
      - tags:aliases:system
      - tags:relationships
      - tags:relationships:system
      - tags:compositions
      - tags:compositions:system
      - tags:ratings
      - tags:relationship_ratings
      - tags:relationship_ratings:system

  - name: Entities
    tags:
      - entities:core
      - entities:tags
      - entities:relationships
      - entities:relationships:system
      - entities:relationship_ratings
      - entities:relationship_ratings:system
      - entities:ratings
      - entities:ratings:system
      - entities:purposes
      - entities:purposes:system
      - entities:versions
      - entities:versions:system

  - name: Utilities
    tags:
      - utilities:part-of-speech
      - utilities:contexts
      - utilities:ratings:system
      - utilities:versioning

  - name: UI
    tags:
      - ui:layouts
      - ui:groups
      - ui:fields

paths:
  ######################################
  # META
  ######################################

  /meta/health:
    get:
      tags: [meta]
      summary: Health check
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  ######################################
  # TAGS
  ######################################

  /tags:
    post:
      tags: [tags:core]
      summary: Create a new tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagInput"
      responses:
        "201":
          description: Tag created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Tag already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags: [tags:core]
      summary: List all tags
      parameters:
        - in: query
          name: limit
          schema: { type: integer, example: 25 }
        - in: query
          name: offset
          schema: { type: integer, example: 0 }
      responses:
        "200":
          description: Paginated list of tags
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Tag"

  /tags/{id}:
    get:
      tags: [tags:core]
      summary: Retrieve tag by ID
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: Tag found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags:core]
      summary: Update tag metadata
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagInput"
      responses:
        "200":
          description: Tag updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags:core]
      summary: Delete a tag
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: Tag deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/aliases:
    get:
      tags: [tags:aliases]
      summary: List aliases for a tag
      description: |
        Retrieve all alias names that belong to this tag. Each alias points to this tag as its canonical reference.
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: List of aliases for the tag
          content:
            application/json:
              schema:
                type: object
                properties:
                  aliases:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagAlias"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags: [tags:aliases]
      summary: Create alias for a tag
      description: |
        Adds a new alias for this tag. The alias must be unique across the entire system.
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, description: "The alias name to create" }
      responses:
        "201":
          description: Alias created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
        "400":
          description: Invalid input or duplicate alias
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags:aliases]
      summary: Bulk update aliases for a tag
      description: |
        Updates all aliases for this tag. Existing aliases may be replaced with a new set of names.
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AliasUpdate"
      responses:
        "200":
          description: Aliases updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_id: { type: string, format: uuid }
                  aliases:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagAlias"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags:aliases]
      summary: Delete all aliases for a tag
      description: |
        Deletes every alias associated with this tag. Use cautiously — all linked alias names will be removed.
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: Aliases deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/aliases/{alias_id}:
    get:
      tags: [tags:aliases]
      summary: Retrieve alias for a tag
      description: |
        Retrieves a single alias record belonging to this tag.
        Useful for viewing details or verifying the canonical tag relationship.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: alias_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier of the alias record
      responses:
        "200":
          description: Alias found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
        "404":
          description: Alias not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags:aliases]
      summary: Update alias for a tag
      description: |
        Updates the name or reassigns the alias to a different canonical tag.
        Typically used to rename an alias or correct its association.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: alias_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New alias name
                tag_id:
                  type: string
                  format: uuid
                  description: Optional — new canonical tag this alias should reference
      responses:
        "200":
          description: Alias updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
        "404":
          description: Alias not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags:aliases]
      summary: Delete alias for a tag
      description: |
        Deletes a single alias record from this tag.
        The canonical tag itself remains unaffected.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: alias_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Alias deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Alias not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tag-aliases:
    get:
      tags: [tags:aliases:system]
      summary: List all tag aliases
      description: |
        Retrieve all aliases across the system. Supports optional filtering by canonical `tag_id`.
      parameters:
        - in: query
          name: tag_id
          schema: { type: string, format: uuid }
          description: Filter aliases belonging to a specific tag
      responses:
        "200":
          description: List of tag aliases
          content:
            application/json:
              schema:
                type: object
                properties:
                  aliases:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagAlias"

    post:
      tags: [tags:aliases:system]
      summary: Create a tag alias
      description: |
        Creates a new alias and links it to a specific tag. The alias name must be unique across the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                tag_id: { type: string, format: uuid }
      responses:
        "201":
          description: Alias created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
        "400":
          description: Invalid input or duplicate alias
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tag-aliases/{id}:
    get:
      tags: [tags:aliases:system]
      summary: Retrieve alias by ID
      description: Retrieve a specific tag alias by its unique ID.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Alias found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
        "404":
          description: Alias not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags:aliases:system]
      summary: Update alias
      description: |
        Updates the alias name or reassigns it to a different canonical tag.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                tag_id: { type: string, format: uuid }
      responses:
        "200":
          description: Alias updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
        "404":
          description: Alias not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags:aliases:system]
      summary: Delete alias
      description: Deletes a tag alias by its unique ID.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Alias deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Alias not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/relationships:
    get:
      tags: [tags:relationships]
      summary: List relationships for a tag
      description: |
        Retrieve all relationships where this tag acts as **Tag A** (the dominant/source).
        Use the optional `direction` query parameter to fetch relationships where this tag
        is either the **source** or the **target**.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - in: query
          name: direction
          schema:
            type: string
            enum: [outgoing, incoming]
            default: outgoing
          description: |
            Controls directionality of the relationships.
            - `outgoing`: tag acts as **Tag A**
            - `incoming`: tag acts as **Tag B**
      responses:
        "200":
          description: List of tag relationships
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationships:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagRelationship"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags: [tags:relationships]
      summary: Create a relationship for a tag
      description: |
        Creates a new relationship originating from this tag as **Tag A**.
        The request body specifies the related tag (`tag_b_id`) and the `relationship_type_id`.
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagRelationshipInput"
      responses:
        "201":
          description: Relationship created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags:relationships]
      summary: Update relationships for a tag
      description: |
        Bulk update of relationships where this tag is the **source (Tag A)**.
        Typically used to modify multiple related tags or relationship types at once.
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RelationshipUpdate"
      responses:
        "200":
          description: Relationships updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationships:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagRelationship"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags:relationships]
      summary: Delete relationships for a tag
      description: |
        Deletes all relationships where this tag is **Tag A** (the source).
        Use with caution — this removes every outgoing relationship for this tag.
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: Relationships deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/relationships/{relationship_id}:
    get:
      tags: [tags:relationships]
      summary: Retrieve tag relationship
      description: |
        Retrieves a single relationship record where this tag acts as **Tag A** (the dominant or source tag).
        This allows inspection of one connection between tags, such as "Vehicle → Car".
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: relationship_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier of the tag relationship record
      responses:
        "200":
          description: Relationship found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
        "404":
          description: Relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags:relationships]
      summary: Update tag relationship
      description: |
        Updates the relationship type or description of a single tag-to-tag relationship.
        The participating tags (`tag_a_id`, `tag_b_id`) remain immutable after creation.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: relationship_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                relationship_type_id:
                  type: string
                  format: uuid
                  description: Updated relationship type
                description:
                  type: string
                  description: Optional new description of the relationship
      responses:
        "200":
          description: Relationship updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
        "404":
          description: Relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags:relationships]
      summary: Delete tag relationship
      description: |
        Deletes a single tag relationship record where this tag acts as **Tag A**.
        This removes the association between the two tags without deleting either tag.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: relationship_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Relationship deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tag-relationships:
    get:
      tags: [tags:relationships:system]
      summary: List all tag relationships
      description: |
        Retrieve all tag relationships in the system.
        Supports optional filters for `tag_a_id`, `tag_b_id`, and `relationship_type_id`.
      parameters:
        - in: query
          name: tag_a_id
          schema: { type: string, format: uuid }
          description: Filter relationships by source tag
        - in: query
          name: tag_b_id
          schema: { type: string, format: uuid }
          description: Filter relationships by target tag
        - in: query
          name: relationship_type_id
          schema: { type: string, format: uuid }
          description: Filter relationships by type
      responses:
        "200":
          description: List of tag relationships
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationships:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagRelationship"

    post:
      tags: [tags:relationships:system]
      summary: Create a tag relationship
      description: |
        Creates a new tag relationship. Both `tag_a_id` (source) and `tag_b_id` (target)
        must be provided explicitly in the request body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagRelationship"
      responses:
        "201":
          description: Tag relationship created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tag-relationships/{id}:
    get:
      tags: [tags:relationships:system]
      summary: Retrieve a tag relationship by ID
      description: Returns a single tag relationship resource.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier of the tag relationship
      responses:
        "200":
          description: Relationship found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
        "404":
          description: Relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags:relationships:system]
      summary: Update a tag relationship
      description: |
        Updates the `relationship_type_id` or `description` of a relationship.
        `tag_a_id` and `tag_b_id` may not be changed after creation.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                relationship_type_id: { type: string, format: uuid }
                description: { type: string }
      responses:
        "200":
          description: Relationship updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
        "404":
          description: Relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags:relationships:system]
      summary: Delete a tag relationship
      description: Permanently deletes a tag relationship by its unique ID.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Relationship deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/compositions:
    get:
      tags: [tags:compositions]
      summary: List components of a composite tag
      description: |
        Retrieves all **component tags** that form the composition of this base tag.
        Each component is returned with its `position` to indicate order in the phrase.
        For example, for the tag `"very big car"`, this would return:
        - `"very"` (position 1)
        - `"big"`  (position 2)
        - `"car"`  (position 3)
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: List of components for the specified base tag
          content:
            application/json:
              schema:
                type: object
                properties:
                  base_tag_id: { type: string, format: uuid }
                  components:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagComponent"
        "404":
          description: Base tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags: [tags:compositions]
      summary: Add component to a composite tag
      description: |
        Adds a new **component tag** to the composition of this base tag.
        The `component_tag_id` specifies which tag to add, and `position` defines where
        in the phrase the component should appear.
        The combination `(base_tag_id, component_tag_id, position)` must be unique.
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagComponentInput"
      responses:
        "201":
          description: Component added to composition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagComponent"
        "400":
          description: Invalid composition (e.g., duplicate position or grammatical rule violation)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags:compositions]
      summary: Update composition for a tag
      description: |
        Bulk-updates the composition of this base tag.
        Used to reorder, replace, or remove multiple components in a single request.
        The full updated list of component tags should be provided in order.
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompositionUpdate"
      responses:
        "200":
          description: Composition updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  base_tag_id: { type: string, format: uuid }
                  components:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagComponent"
        "404":
          description: Base tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags:compositions]
      summary: Delete composition for a tag
      description: |
        Deletes all component links for this base tag, effectively breaking the composite phrase.
        The base tag itself remains intact as a standalone tag.
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: Composition deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Base tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/compositions/{composition_id}:
    get:
      tags: [tags:compositions]
      summary: Retrieve component of a composite tag
      description: |
        Retrieves a single component link belonging to this base tag’s composition.
        Each record connects the base tag (the composite phrase) to one component tag,
        with a specific position defining order in the phrase.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: composition_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier of the composition record
      responses:
        "200":
          description: Composition component found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagComponent"
        "404":
          description: Composition component not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags:compositions]
      summary: Update composition component
      description: |
        Updates metadata for a single composition component record.
        The participating tags (`base_tag_id`, `component_tag_id`) remain immutable after creation.
        Only the `position` value can be modified.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: composition_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                position:
                  type: integer
                  minimum: 1
                  description: Updated position of the component within the composite phrase
      responses:
        "200":
          description: Composition component updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagComponent"
        "404":
          description: Composition component not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags:compositions]
      summary: Delete composition component
      description: |
        Deletes a single component link from this tag’s composition.
        The component tag itself remains unaffected, but it is no longer part of this composite phrase.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: composition_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Composition component deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Composition component not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tag-compositions:
    get:
      tags: [tags:compositions:system]
      summary: List all tag compositions
      description: |
        Retrieves all composition records in the system.
        Each record describes a relationship between a **base tag** and one of its **component tags**.
        Optional query parameters allow filtering by `base_tag_id` or `component_tag_id`.
      parameters:
        - in: query
          name: base_tag_id
          schema: { type: string, format: uuid }
          description: Filter compositions by base tag
        - in: query
          name: component_tag_id
          schema: { type: string, format: uuid }
          description: Filter compositions by a specific component tag
      responses:
        "200":
          description: List of tag compositions
          content:
            application/json:
              schema:
                type: object
                properties:
                  compositions:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagComponent"

    post:
      tags: [tags:compositions:system]
      summary: Create a tag composition record
      description: |
        Creates a new composition link between a base tag and a component tag.
        The `position` field defines the component’s place in the sequence.
        Used for inserting new composite definitions globally without referencing a specific tag path.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                base_tag_id: { type: string, format: uuid }
                component_tag_id: { type: string, format: uuid }
                position:
                  {
                    type: integer,
                    description: "Order of the component in the phrase (1-based)",
                  }
      responses:
        "201":
          description: Composition created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagComponent"
        "400":
          description: Invalid input or duplicate composition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tag-compositions/{id}:
    get:
      tags: [tags:compositions:system]
      summary: Retrieve tag composition by ID
      description: Retrieve a single composition record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Composition found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagComponent"
        "404":
          description: Composition not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags:compositions:system]
      summary: Update a tag composition
      description: |
        Updates the `position` or corrects metadata of a composition record.
        The `base_tag_id` and `component_tag_id` cannot be changed after creation.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                position: { type: integer }
      responses:
        "200":
          description: Composition updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagComponent"
        "404":
          description: Composition not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags:compositions:system]
      summary: Delete a tag composition
      description: Permanently deletes a single composition record by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Composition deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Composition not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/ratings:
    get:
      tags: [tags:ratings]
      summary: List contextual ratings for a tag
      description: |
        Retrieve all contextual ratings applied to this tag, grouped by context.
        For example, "Dog" might have a `likeness` rating of 9/10 and a `clarity` rating of 8/10.
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: List of contextual ratings for the tag
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_id: { type: string, format: uuid }
                  ratings:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagContextualRatingInput"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags:ratings]
      summary: Apply or update contextual ratings for a tag
      description: |
        Applies or updates contextual ratings for this tag across one or more contexts.
        Used to express subjective or objective evaluations (e.g., "Likeness", "Clarity").
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContextualRatingUpdate"
      responses:
        "200":
          description: Contextual ratings applied or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_id: { type: string, format: uuid }
                  ratings:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagContextualRatingInput"
        "404":
          description: Tag or context not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags:ratings]
      summary: Delete contextual ratings for a tag
      description: |
        Removes all contextual ratings associated with this tag.
        Use cautiously — this clears all user-assigned ratings for the tag.
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: Contextual ratings deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/ratings/{rating_id}:
    get:
      tags: [tags:ratings]
      summary: Retrieve a contextual rating for a tag
      description: |
        Retrieves a specific contextual rating record for this tag, identified by its unique rating assignment ID.
        This does **not** refer to the `/ratings` table entry itself, but to the *rating instance* assigned to the tag.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: rating_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier of the contextual rating record
      responses:
        "200":
          description: Contextual rating found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagContextualRatingInput"
        "404":
          description: Contextual rating not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags:ratings]
      summary: Update a contextual rating for a tag
      description: |
        Updates the rating, context, or user assignment for a specific contextual rating record.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: rating_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagContextualRatingInput"
      responses:
        "200":
          description: Contextual rating updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagContextualRatingInput"
        "404":
          description: Contextual rating not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags:ratings]
      summary: Delete a contextual rating for a tag
      description: |
        Deletes a single contextual rating record from this tag.
        The rating definition itself (in `/ratings`) remains unaffected.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: rating_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Contextual rating deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Contextual rating not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/relationship_ratings:
    get:
      tags: [tags:relationship_ratings]
      summary: List relationship ratings for a tag
      description: |
        Retrieve all ratings applied to relationships where this tag acts as **Tag A**.
        For example, "Dog → Animal" may have a `relevance` rating of 0.95.
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: List of ratings for relationships originating from this tag
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_a_id: { type: string, format: uuid }
                  relationship_ratings:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagRelationshipRatingInput"
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags:relationship_ratings]
      summary: Apply or update relationship ratings for a tag
      description: |
        Applies or updates ratings on relationships where this tag acts as **Tag A**.
        Each rating reflects a subjective or objective evaluation of the connection strength or quality.
      parameters:
        - $ref: "#/components/parameters/TagId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RelationshipRatingUpdate"
      responses:
        "200":
          description: Relationship ratings recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_a_id: { type: string, format: uuid }
                  ratings:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagRelationshipRatingInput"
        "404":
          description: Tag or related tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags:relationship_ratings]
      summary: Delete relationship ratings for a tag
      description: |
        Deletes all ratings assigned to relationships where this tag acts as **Tag A**.
        This removes evaluations on all related connections for the tag.
      parameters:
        - $ref: "#/components/parameters/TagId"
      responses:
        "200":
          description: Relationship ratings deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags/{id}/relationship_ratings/{rating_id}:
    get:
      tags: [tags:relationship_ratings]
      summary: Retrieve relationship rating for a tag
      description: |
        Retrieves a single relationship rating record where this tag acts as **Tag A** (the source).
        Each record represents a rating applied to one connection between Tag A and Tag B
        under a specific context.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: rating_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier of the relationship rating record
      responses:
        "200":
          description: Relationship rating found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationshipRatingInput"
        "404":
          description: Relationship rating not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [tags:relationship_ratings]
      summary: Update relationship rating for a tag
      description: |
        Updates an existing relationship rating record.
        The linked tags (Tag A, Tag B) cannot be changed after creation, but you can modify
        the `context_id` or `rating_id` to reflect a new evaluation.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: rating_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                context_id:
                  type: string
                  format: uuid
                  description: Updated context for this relationship rating
                rating_id:
                  type: string
                  format: uuid
                  description: Updated rating value for this relationship
      responses:
        "200":
          description: Relationship rating updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationshipRatingInput"
        "404":
          description: Relationship rating not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [tags:relationship_ratings]
      summary: Delete relationship rating for a tag
      description: |
        Deletes a single relationship rating record where this tag acts as **Tag A**.
        This operation removes only the rating, not the underlying tag relationship itself.
      parameters:
        - $ref: "#/components/parameters/TagId"
        - name: rating_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Relationship rating deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Relationship rating not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  ######################################
  # ENTITIES
  ######################################

  /entities:
    get:
      tags: [entities:core]
      summary: List all entities
      description: Retrieve a paginated list of entities (digital or physical assets) tracked by the system.
      parameters:
        - in: query
          name: limit
          schema: { type: integer, example: 25 }
          description: Maximum number of entities to return.
        - in: query
          name: offset
          schema: { type: integer, example: 0 }
          description: Number of entities to skip before starting to collect the result set.
      responses:
        "200":
          description: Paginated list of entities
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Entity"

    post:
      tags: [entities:core]
      summary: Create a new entity
      description: Create a new entity record with optional metadata, location, and primary flag.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityInput"
      responses:
        "201":
          description: Entity created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}:
    get:
      tags: [entities:core]
      summary: Retrieve entity by ID
      description: Fetch a single entity by its unique identifier.
      parameters:
        - $ref: "#/components/parameters/EntityId"
      responses:
        "200":
          description: Entity found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities:core]
      summary: Update an entity
      description: Update entity properties such as name, location, is_primary, or metadata.
      parameters:
        - $ref: "#/components/parameters/EntityId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityInput"
      responses:
        "200":
          description: Entity updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [entities:core]
      summary: Delete an entity
      description: Permanently delete an entity record. Downstream cleanup is implementation-specific.
      parameters:
        - $ref: "#/components/parameters/EntityId"
      responses:
        "200":
          description: Entity deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/tags:
    get:
      tags: [entities:tags]
      summary: List tags assigned to an entity
      description: Retrieve all tags currently assigned to this entity, including contextual and metadata details.
      parameters:
        - $ref: "#/components/parameters/EntityId"
      responses:
        "200":
          description: List of assigned tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityTagAssignment"
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities:tags]
      summary: Update tags assigned to an entity
      description: Assign or unassign tags for this entity, including updates to context or metadata on existing assignments.
      parameters:
        - $ref: "#/components/parameters/EntityId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityTagUpdate"
      responses:
        "200":
          description: Tag assignments updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  entity_id: { type: string, format: uuid }
                  tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityTagAssignment"
        "404":
          description: Entity or tags not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/tags/{tag_id}:
    get:
      tags: [entities:tags]
      summary: Retrieve specific tag assignment
      description: Retrieve information about a specific tag attached to this entity, including contextual data if present.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: tag_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier for the tag assignment
      responses:
        "200":
          description: Tag assignment found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityTagAssignment"
        "404":
          description: Tag assignment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [entities:tags]
      summary: Remove tag assignment from entity
      description: Unassign a specific tag from this entity while leaving the tag itself intact in the database.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: tag_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier for the tag assignment
      responses:
        "200":
          description: Tag unassigned from entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: unassigned
        "404":
          description: Entity or tag assignment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/purposes:
    get:
      tags: [entities:purposes]
      summary: List purpose tags assigned to an entity
      description: Retrieve all purpose tags assigned to this entity, describing its functional role or intended use within a larger workflow or dataset.
      parameters:
        - $ref: "#/components/parameters/EntityId"
      responses:
        "200":
          description: List of purposes assigned to the entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  purposes:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityPurposeInput"
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities:purposes]
      summary: Update purpose tags for an entity
      description: Add, remove, or update the set of purpose tags assigned to this entity, designating its functional role within a workflow or dataset.
      parameters:
        - $ref: "#/components/parameters/EntityId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityPurposeUpdate"
      responses:
        "200":
          description: Purposes updated for the entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  entity_id: { type: string, format: uuid }
                  purposes:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityPurposeInput"
        "404":
          description: Entity or purpose tag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/purposes/{purpose_id}:
    get:
      tags: [entities:purposes]
      summary: Retrieve a specific purpose tag for an entity
      description: Retrieve information about a specific purpose tag assigned to this entity, including whether it is marked as primary or secondary.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: purpose_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier for the purpose record
      responses:
        "200":
          description: Purpose record found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityPurposeInput"
        "404":
          description: Purpose record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities:purposes]
      summary: Update a specific purpose tag for an entity
      description: Update a single purpose tag assignment for this entity, such as marking it as primary or changing the linked purpose tag.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: purpose_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                purpose_tag_id:
                  type: string
                  format: uuid
                  description: Updated purpose tag reference.
                is_primary:
                  type: boolean
                  description: Whether this purpose is the primary designation for the entity.
      responses:
        "200":
          description: Purpose record updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityPurposeInput"
        "404":
          description: Purpose record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [entities:purposes]
      summary: Delete a specific purpose tag from an entity
      description: Remove a purpose assignment from this entity while leaving the purpose tag itself intact in the database.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: purpose_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Purpose record deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Purpose record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/versions:
    get:
      tags: [entities:versions]
      summary: List versions of an entity
      description: Retrieve all entities that represent alternate, prior, or derived versions of this entity. Each record reflects a version relationship derived from `entity_relationships`.
      parameters:
        - $ref: "#/components/parameters/EntityId"
      responses:
        "200":
          description: List of entity versions
          content:
            application/json:
              schema:
                type: object
                properties:
                  versions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Entity"
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities:versions]
      summary: Update version relationships for an entity
      description: Create or modify version links between this entity and others. Internally, these map to entries in `entity_relationships` with type `"version-of"`.
      parameters:
        - $ref: "#/components/parameters/EntityId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                versions:
                  type: array
                  description: List of related entity IDs that represent version links.
                  items:
                    type: object
                    properties:
                      entity_b_id:
                        type: string
                        format: uuid
                        description: The related entity serving as a version.
                      relationship_type_id:
                        type: string
                        format: uuid
                        description: Identifier for the `"version-of"` relationship type.
      responses:
        "200":
          description: Versions updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  entity_a_id: { type: string, format: uuid }
                  versions:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityRelationship"
        "404":
          description: Entity or related version not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/versions/{version_id}:
    get:
      tags: [entities:versions]
      summary: Retrieve a specific version of an entity
      description: Retrieve the relationship record linking this entity to a specific version, as defined by the `"version-of"` relationship type.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: version_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier for the related version entity.
      responses:
        "200":
          description: Version relationship found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationship"
        "404":
          description: Version relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities:versions]
      summary: Update a specific version relationship
      description: Update properties of a version relationship (e.g., change relationship type or metadata). The participating entities remain immutable.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: version_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                relationship_type_id:
                  type: string
                  format: uuid
                  description: Updated relationship type ID, typically `"version-of"`.
      responses:
        "200":
          description: Version relationship updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationship"
        "404":
          description: Version relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [entities:versions]
      summary: Delete a version relationship
      description: Remove the version link between this entity and another. Both entities remain intact, but their version association is deleted.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: version_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Version relationship deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Version relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/ratings:
    get:
      tags: [entities:ratings]
      summary: List ratings applied to an entity
      description: Retrieve all contextual ratings applied to this entity, including rating values, types, and context metadata.
      parameters:
        - $ref: "#/components/parameters/EntityId"
      responses:
        "200":
          description: List of ratings for this entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  ratings:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityContextualRatingInput"
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities:ratings]
      summary: Update or apply ratings for an entity
      description: Apply or update one or more contextual ratings for this entity. Each rating reflects an evaluative measure such as quality, accuracy, or completeness.
      parameters:
        - $ref: "#/components/parameters/EntityId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityContextualRatingUpdate"
      responses:
        "200":
          description: Ratings updated or applied
          content:
            application/json:
              schema:
                type: object
                properties:
                  entity_id: { type: string, format: uuid }
                  ratings:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityContextualRatingInput"
        "404":
          description: Entity or context not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/ratings/{rating_id}:
    get:
      tags: [entities:ratings]
      summary: Retrieve a specific rating for an entity
      description: Retrieve a single contextual rating record applied to this entity under a given context.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: rating_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier of the rating record
      responses:
        "200":
          description: Rating record found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityContextualRatingInput"
        "404":
          description: Rating record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities:ratings]
      summary: Update a specific entity rating
      description: Update the context or rating value for a single entity rating record.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: rating_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                context_id:
                  type: string
                  format: uuid
                  description: Updated context for this rating record.
                rating_id:
                  type: string
                  format: uuid
                  description: Updated rating value applied to this entity.
      responses:
        "200":
          description: Rating record updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityContextualRatingInput"
        "404":
          description: Rating record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [entities:ratings]
      summary: Delete a specific entity rating
      description: Permanently delete a single rating record applied to this entity. This operation does not affect rating definitions or contexts.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: rating_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Rating record deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Rating record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/relationships:
    get:
      tags: [entities:relationships]
      summary: List relationships for an entity
      description: Retrieve all relationships where this entity acts as **Entity A** (the source). Each record defines a directional link to another entity.
      parameters:
        - $ref: "#/components/parameters/EntityId"
      responses:
        "200":
          description: List of relationships for the entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationships:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityRelationship"
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities:relationships]
      summary: Update relationships for an entity
      description: Create or modify relationships where this entity acts as **Entity A**, defining links to one or more target entities (**Entity B**).
      parameters:
        - $ref: "#/components/parameters/EntityId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipUpdate"
      responses:
        "200":
          description: Relationships updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  entity_a_id: { type: string, format: uuid }
                  relationships:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityRelationship"
        "404":
          description: Entity or related entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/relationships/{relationship_id}:
    get:
      tags: [entities:relationships]
      summary: Retrieve a specific entity relationship
      description: Retrieve a single relationship record where this entity acts as **Entity A**, such as “Original Render → Color Corrected Version.”
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: relationship_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier of the relationship record
      responses:
        "200":
          description: Relationship found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationship"
        "404":
          description: Relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities:relationships]
      summary: Update a specific entity relationship
      description: Update the relationship type or description for an existing link. The participating entities remain immutable.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: relationship_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                relationship_type_id:
                  type: string
                  format: uuid
                  description: Updated relationship type
      responses:
        "200":
          description: Relationship updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationship"
        "404":
          description: Relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [entities:relationships]
      summary: Delete a specific entity relationship
      description: Permanently remove a relationship link between this entity (**Entity A**) and another (**Entity B**) without deleting either entity.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: relationship_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Relationship deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/relationship_ratings:
    get:
      tags: [entities:relationship_ratings]
      summary: List relationship ratings for an entity
      description: Retrieve all relationship rating records where this entity acts as **Entity A** (the source). Each record rates the connection to another entity.
      parameters:
        - $ref: "#/components/parameters/EntityId"
      responses:
        "200":
          description: List of relationship ratings for this entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationship_ratings:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityRelationshipRatingInput"
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities:relationship_ratings]
      summary: Update or create relationship ratings for an entity
      description: Apply or update contextual ratings for relationships where this entity acts as **Entity A**. Ratings measure qualities such as confidence or clarity of the connection.
      parameters:
        - $ref: "#/components/parameters/EntityId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipRatingUpdate"
      responses:
        "200":
          description: Relationship ratings updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  entity_a_id: { type: string, format: uuid }
                  relationship_ratings:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityRelationshipRatingInput"
        "404":
          description: Entity or related entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entities/{id}/relationship_ratings/{rating_id}:
    get:
      tags: [entities:relationship_ratings]
      summary: Retrieve a single entity relationship rating
      description: Retrieve a single relationship rating record for a connection where this entity acts as **Entity A**.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: rating_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier of the relationship rating record
      responses:
        "200":
          description: Relationship rating found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationshipRatingInput"
        "404":
          description: Relationship rating not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [entities:relationship_ratings]
      summary: Update a specific entity relationship rating
      description: Update the rating value or context for a specific entity-to-entity relationship record. The participating entities remain immutable.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: rating_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                context_id:
                  type: string
                  format: uuid
                  description: Updated context for this relationship rating
                rating_id:
                  type: string
                  format: uuid
                  description: Updated rating value for this relationship
      responses:
        "200":
          description: Relationship rating updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationshipRatingInput"
        "404":
          description: Relationship rating not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [entities:relationship_ratings]
      summary: Delete a single entity relationship rating
      description: Permanently delete a relationship rating record for this entity. The entities and relationship itself remain intact.
      parameters:
        - $ref: "#/components/parameters/EntityId"
        - name: rating_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Relationship rating deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Relationship rating not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entity-relationships:
    get:
      tags: [entities:relationships:system]
      summary: List all entity relationships
      description: Retrieve a system-wide list of all entity-to-entity relationships, regardless of source or target.
      responses:
        "200":
          description: List of entity relationships
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationships:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityRelationship"

    post:
      tags: [entities:relationships:system]
      summary: Create a new entity relationship
      description: Create a new relationship between two entities, defining their linkage type and direction.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipInput"
      responses:
        "201":
          description: Relationship created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationship"

  /entity-relationships/{id}:
    patch:
      tags: [entities:relationships:system]
      summary: Update a specific entity relationship
      description: Update the relationship type or description for a specific relationship record.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Unique identifier for the relationship record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipInput"
      responses:
        "200":
          description: Relationship updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationship"

    delete:
      tags: [entities:relationships:system]
      summary: Delete a specific entity relationship
      description: Permanently remove an entity-to-entity relationship record from the system.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Relationship deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

  /entity-relationship-ratings:
    get:
      tags: [entities:relationship_ratings:system]
      summary: List all entity relationship ratings
      description: Retrieve a global list of all contextual ratings applied to entity-to-entity relationships.
      responses:
        "200":
          description: List of entity relationship ratings
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationship_ratings:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityRelationshipRatingInput"

    post:
      tags: [entities:relationship_ratings:system]
      summary: Create a new entity relationship rating
      description: Apply a rating to a relationship between two entities, capturing its confidence or quality.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipRatingInput"
      responses:
        "201":
          description: Relationship rating created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationshipRatingInput"

  /entity-relationship-ratings/{id}:
    patch:
      tags: [entities:relationship_ratings:system]
      summary: Update a specific entity relationship rating
      description: Modify the rating value or context for a specific relationship rating record.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipRatingInput"
      responses:
        "200":
          description: Relationship rating updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationshipRatingInput"

    delete:
      tags: [entities:relationship_ratings:system]
      summary: Delete a specific entity relationship rating
      description: Permanently delete a relationship rating record between two entities.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Relationship rating deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

  /entity-ratings:
    get:
      tags: [entities:ratings:system]
      summary: List all entity ratings
      description: Retrieve a global list of all contextual ratings applied directly to entities.
      responses:
        "200":
          description: List of entity ratings
          content:
            application/json:
              schema:
                type: object
                properties:
                  ratings:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityContextualRatingInput"

    post:
      tags: [entities:ratings:system]
      summary: Create a new entity rating
      description: Apply a new contextual rating to a specific entity.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityContextualRatingInput"
      responses:
        "201":
          description: Entity rating created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityContextualRatingInput"

  /entity-ratings/{id}:
    patch:
      tags: [entities:ratings:system]
      summary: Update a specific entity rating
      description: Modify the rating value or context for an existing entity rating record.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityContextualRatingInput"
      responses:
        "200":
          description: Entity rating updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityContextualRatingInput"

    delete:
      tags: [entities:ratings:system]
      summary: Delete a specific entity rating
      description: Permanently remove a contextual rating record from the database.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Entity rating deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

  /entity-purposes:
    get:
      tags: [entities:purposes:system]
      summary: List all entity purposes
      description: Retrieve all purpose tag assignments across all entities, including which are primary.
      responses:
        "200":
          description: List of all purpose records
          content:
            application/json:
              schema:
                type: object
                properties:
                  purposes:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityPurposeInput"

    post:
      tags: [entities:purposes:system]
      summary: Create a new purpose assignment
      description: Assign a new purpose tag to an entity, optionally marking it as primary.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityPurposeInput"
      responses:
        "201":
          description: Purpose record created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityPurposeInput"

  /entity-purposes/{id}:
    patch:
      tags: [entities:purposes:system]
      summary: Update a specific purpose record
      description: Update an existing purpose assignment across any entity.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityPurposeInput"
      responses:
        "200":
          description: Purpose record updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityPurposeInput"

    delete:
      tags: [entities:purposes:system]
      summary: Delete a specific purpose record
      description: Permanently delete a purpose tag assignment from the database.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Purpose record deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

  /entity-versions:
    get:
      tags: [entities:versions:system]
      summary: List all entity version relationships
      description: Retrieve all version-type relationships (e.g., “version-of”) across the system.
      responses:
        "200":
          description: List of version relationships
          content:
            application/json:
              schema:
                type: object
                properties:
                  versions:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntityRelationship"

    post:
      tags: [entities:versions:system]
      summary: Create a new version relationship
      description: Create a relationship between two entities marked as a version link (“version-of” type).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipInput"
      responses:
        "201":
          description: Version relationship created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationship"

  ######################################
  # UTILITIES
  ######################################

  /contexts:
    get:
      tags: [utilities:contexts]
      summary: List all contexts
      description: Retrieve all semantic contexts under which tags, entities, or relationships can be grouped, rated, or classified.
      responses:
        "200":
          description: List of contexts
          content:
            application/json:
              schema:
                type: object
                properties:
                  contexts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Context"

    post:
      tags: [utilities:contexts]
      summary: Create a new context
      description: Create a new semantic or evaluative context for use across tags and entities (e.g., “Style”, “Clarity”, or “Mood”).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContextInput"
      responses:
        "201":
          description: Context created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Context"

  /contexts/{id}:
    get:
      tags: [utilities:contexts]
      summary: Retrieve a specific context
      description: Retrieve a single context record by ID, including its classification type and active status.
      parameters:
        - $ref: "#/components/parameters/ContextId"
      responses:
        "200":
          description: Context found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Context"
        "404":
          description: Context not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [utilities:contexts]
      summary: Update a specific context
      description: Modify the name, classification type, description, or active status of a context record.
      parameters:
        - $ref: "#/components/parameters/ContextId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContextInput"
      responses:
        "200":
          description: Context updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Context"
        "404":
          description: Context not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [utilities:contexts]
      summary: Delete a specific context
      description: Permanently delete a context record, preventing its further use in tagging, rating, or classification.
      parameters:
        - $ref: "#/components/parameters/ContextId"
      responses:
        "200":
          description: Context deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Context not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /parts-of-speech:
    get:
      tags: [utilities:part-of-speech]
      summary: List all parts of speech
      description: Retrieve all grammatical classifications used to categorize tags (e.g., noun, adjective, adverb).
      responses:
        "200":
          description: List of parts of speech
          content:
            application/json:
              schema:
                type: object
                properties:
                  parts_of_speech:
                    type: array
                    items:
                      $ref: "#/components/schemas/PartOfSpeech"

    post:
      tags: [utilities:part-of-speech]
      summary: Create a new part of speech
      description: Define a new grammatical classification for use in tag labeling or composition validation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartOfSpeechInput"
      responses:
        "201":
          description: Part of speech created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartOfSpeech"

  /parts-of-speech/{id}:
    get:
      tags: [utilities:part-of-speech]
      summary: Retrieve a specific part of speech
      description: Retrieve details of a specific grammatical classification by its unique identifier.
      parameters:
        - $ref: "#/components/parameters/PartOfSpeechId"
      responses:
        "200":
          description: Part of speech found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartOfSpeech"
        "404":
          description: Part of speech not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags: [utilities:part-of-speech]
      summary: Update a specific part of speech
      description: Modify the name, description, or activation status of a grammatical classification record.
      parameters:
        - $ref: "#/components/parameters/PartOfSpeechId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartOfSpeechInput"
      responses:
        "200":
          description: Part of speech updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartOfSpeech"
        "404":
          description: Part of speech not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [utilities:part-of-speech]
      summary: Delete a specific part of speech
      description: Permanently delete a grammatical classification record from the database.
      parameters:
        - $ref: "#/components/parameters/PartOfSpeechId"
      responses:
        "200":
          description: Part of speech deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted
        "404":
          description: Part of speech not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /ratings:
    get:
      tags: [utilities]
      summary: Retrieve all ratings
      responses:
        "200":
          description: List of ratings
          content:
            application/json:
              schema:
                type: object
                properties:
                  ratings:
                    type: array
                    items:
                      $ref: "#/components/schemas/Rating"
    post:
      tags: [utilities]
      summary: Create a new rating
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingInput"
      responses:
        "201":
          description: Rating created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
  /ratings/{id}:
    patch:
      tags: [utilities]
      summary: Update a rating
      parameters:
        - $ref: "#/components/parameters/RatingId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingInput"
      responses:
        "200":
          description: Rating updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
    delete:
      tags: [utilities]
      summary: Delete a rating
      parameters:
        - $ref: "#/components/parameters/RatingId"
      responses:
        "200":
          description: Rating deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

  /rating-types:
    get:
      tags: [utilities]
      summary: Retrieve all rating types
      responses:
        "200":
          description: List of rating types
          content:
            application/json:
              schema:
                type: object
                properties:
                  rating_types:
                    type: array
                    items:
                      $ref: "#/components/schemas/RatingType"
    post:
      tags: [utilities]
      summary: Create a new rating type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingTypeInput"
      responses:
        "201":
          description: Rating type created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingType"
  /rating-types/{id}:
    patch:
      tags: [utilities]
      summary: Update a rating type
      parameters:
        - $ref: "#/components/parameters/RatingTypeId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingTypeInput"
      responses:
        "200":
          description: Rating type updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingType"
    delete:
      tags: [utilities]
      summary: Delete a rating type
      parameters:
        - $ref: "#/components/parameters/RatingTypeId"
      responses:
        "200":
          description: Rating type deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

  ######################################
  # UI CONFIGURATIONS
  ######################################

  /ui/layouts:
    get:
      tags: [ui]
      summary: Retrieve all UI layouts
      responses:
        "200":
          description: List of UI layouts
          content:
            application/json:
              schema:
                type: object
                properties:
                  ui_layouts:
                    type: array
                    items:
                      $ref: "#/components/schemas/UiLayout"
    post:
      tags: [ui]
      summary: Create a new UI layout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiLayoutInput"
      responses:
        "201":
          description: UI layout created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiLayout"
  /ui/layouts/{id}:
    patch:
      tags: [ui]
      summary: Update a UI layout
      parameters:
        - $ref: "#/components/parameters/UiLayoutId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiLayoutInput"
      responses:
        "200":
          description: UI layout updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiLayout"
    delete:
      tags: [ui]
      summary: Delete a UI layout
      parameters:
        - $ref: "#/components/parameters/UiLayoutId"
      responses:
        "200":
          description: UI layout deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

  /ui/groups:
    get:
      tags: [ui]
      summary: Retrieve all UI groups
      responses:
        "200":
          description: List of UI groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  ui_groups:
                    type: array
                    items:
                      $ref: "#/components/schemas/UiGroup"
    post:
      tags: [ui]
      summary: Create a new UI group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiGroupInput"
      responses:
        "201":
          description: UI group created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiGroup"
  /ui/groups/{id}:
    patch:
      tags: [ui]
      summary: Update a UI group
      parameters:
        - $ref: "#/components/parameters/UiGroupId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiGroupInput"
      responses:
        "200":
          description: UI group updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiGroup"
    delete:
      tags: [ui]
      summary: Delete a UI group
      parameters:
        - $ref: "#/components/parameters/UiGroupId"
      responses:
        "200":
          description: UI group deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

  /ui/fields:
    get:
      tags: [ui]
      summary: Retrieve all UI fields
      responses:
        "200":
          description: List of UI fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  ui_fields:
                    type: array
                    items:
                      $ref: "#/components/schemas/UiField"
    post:
      tags: [ui]
      summary: Create a new UI field
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiFieldInput"
      responses:
        "201":
          description: UI field created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiField"
  /ui/fields/{id}:
    patch:
      tags: [ui]
      summary: Update a UI field
      parameters:
        - $ref: "#/components/parameters/UiFieldId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiFieldInput"
      responses:
        "200":
          description: UI field updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiField"
    delete:
      tags: [ui]
      summary: Delete a UI field
      parameters:
        - $ref: "#/components/parameters/UiFieldId"
      responses:
        "200":
          description: UI field deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: deleted

######################################
# COMPONENTS
######################################

components:
  parameters:
    TagId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
      description: Unique identifier for the tag
    EntityId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
      description: Unique identifier for the entity
    UiLayoutId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
      description: Unique identifier for the UI layout
    ContextId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
    PartOfSpeechId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
    RatingTypeId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
    RatingId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
    UiGroupId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
    UiFieldId:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }

  schemas:
    ErrorResponse:
      type: object
      properties:
        code: { type: integer, example: 404 }
        message: { type: string, example: "Resource not found" }
        details: { type: object }
      required: [code, message]

    PaginatedResponse:
      type: object
      properties:
        results: { type: array, items: {} }
        total: { type: integer, example: 42 }

    # ---- Tags
    Tag:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        display_name: { type: string }
        metadata: { type: object }
        part_of_speech_id: { type: string, format: uuid }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
      example:
        id: "a123e456-78b9-4cde-8123-456789abcdef"
        name: "dog"
        display_name: "Dog"
        metadata: { source: "Label Studio" }

    TagInput:
      type: object
      required: [name]
      properties:
        name: { type: string }
        display_name: { type: string }
        metadata: { type: object }
        part_of_speech_id: { type: string, format: uuid }

    TagAlias:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        tag_id: { type: string, format: uuid }
      description: |
        Represents an alias or synonym for a canonical tag.
        Each alias points to a tag via `tag_id`.

    AliasUpdate:
      type: object
      properties:
        aliases:
          type: array
          items: { type: string }
      description: |
        Used for bulk-updating aliases for a tag. Each string value represents an alias name.

    TagRelationship:
      type: object
      description: |
        Represents a directional relationship between two tags.
        `tag_a_id` is the source or dominant tag, and `tag_b_id` is the target or dependent tag.
      properties:
        id: { type: string, format: uuid }
        tag_a_id: { type: string, format: uuid }
        tag_b_id: { type: string, format: uuid }
        relationship_type_id: { type: string, format: uuid }
        description: { type: string }
      example:
        id: "b123e456-78b9-4cde-8123-456789abcdef"
        tag_a_id: "11111111-1111-1111-1111-111111111111"
        tag_b_id: "22222222-2222-2222-2222-222222222222"
        relationship_type_id: "33333333-3333-3333-3333-333333333333"
        description: "Vehicle is the parent of Car"

    TagRelationshipInput:
      type: object
      description: |
        Input model for creating or updating a tag relationship.
        Used by both scoped (`/tags/{id}/relationships`) and global (`/tag-relationships`) endpoints.
      properties:
        tag_b_id: { type: string, format: uuid }
        relationship_type_id: { type: string, format: uuid }
        description: { type: string }
      required: [tag_b_id, relationship_type_id]
      example:
        tag_b_id: "22222222-2222-2222-2222-222222222222"
        relationship_type_id: "33333333-3333-3333-3333-333333333333"
        description: "Parent-child relationship"

    RelationshipUpdate:
      type: object
      description: |
        Bulk-update model for tag relationships.
        Used to update multiple relationships in a single request.
      properties:
        relationships:
          type: array
          items:
            $ref: "#/components/schemas/TagRelationshipInput"
      required: [relationships]
      example:
        relationships:
          - tag_b_id: "44444444-4444-4444-4444-444444444444"
            relationship_type_id: "55555555-5555-5555-5555-555555555555"
            description: "Alternate version of"

    TagComponent:
      type: object
      description: |
        Represents a single component within a composite tag.
        Links a **base tag** (composite phrase) to one of its **component tags**,
        with a defined order (`position`) indicating sequence in the phrase.
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the composition record.
        base_tag_id:
          type: string
          format: uuid
          description: The composite tag being formed (e.g., "very big red car").
        component_tag_id:
          type: string
          format: uuid
          description: The atomic tag being used as a component (e.g., "big").
        position:
          type: integer
          minimum: 1
          description: |
            Order of the component tag within the composite phrase (1-based index).
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - base_tag_id
        - component_tag_id
        - position
      example:
        id: "b123e456-78b9-4cde-8123-456789abcdef"
        base_tag_id: "a123e456-78b9-4cde-8123-456789abcdef"
        component_tag_id: "c123e456-78b9-4cde-8123-456789abcdef"
        position: 2
        created_at: "2025-10-07T12:00:00Z"
        updated_at: "2025-10-07T12:30:00Z"

    TagComponentInput:
      type: object
      description: |
        Input model for adding a component to a composite tag.
        Used by both the scoped (`/tags/{id}/compositions`) and global (`/tag-compositions`) endpoints.
      properties:
        component_tag_id:
          type: string
          format: uuid
          description: The component tag being added to the composition.
        position:
          type: integer
          minimum: 1
          description: Position of this component in the composite phrase (1-based index).
      required:
        - component_tag_id
        - position
      example:
        component_tag_id: "c123e456-78b9-4cde-8123-456789abcdef"
        position: 3

    CompositionUpdate:
      type: object
      description: |
        Bulk-update model for composite tag components.
        Replaces the full set of component tags for a base tag.
      properties:
        components:
          type: array
          items:
            $ref: "#/components/schemas/TagComponentInput"
      required:
        - components
      example:
        components:
          - component_tag_id: "11111111-1111-1111-1111-111111111111"
            position: 1
          - component_tag_id: "22222222-2222-2222-2222-222222222222"
            position: 2
          - component_tag_id: "33333333-3333-3333-3333-333333333333"
            position: 3

    # ---- Entities
    Entity:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        location: { type: string }
        is_primary: { type: boolean }
        metadata: { type: object }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    EntityInput:
      type: object
      required: [name]
      properties:
        name: { type: string }
        location: { type: string }
        is_primary: { type: boolean }
        metadata: { type: object }

    EntityTagAssignment:
      type: object
      properties:
        tag: { $ref: "#/components/schemas/Tag" }
        context_id: { type: string, format: uuid }
        metadata: { type: object }

    EntityTagAssignmentInput:
      type: object
      properties:
        tag_id: { type: string, format: uuid }
        context_id: { type: string, format: uuid }
        metadata: { type: object }

    EntityTagUpdate:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: "#/components/schemas/EntityTagAssignmentInput"

    EntityPurposeInput:
      type: object
      properties:
        purpose_tag_id: { type: string, format: uuid }
        is_primary: { type: boolean }

    EntityPurposeUpdate:
      type: object
      properties:
        purposes:
          type: array
          items:
            $ref: "#/components/schemas/EntityPurposeInput"

    EntityRelationship:
      type: object
      description: |
        Directionality semantics:
        - entity_a_id — source/primary entity
        - entity_b_id — alternate/derived entity
      properties:
        entity_a_id: { type: string, format: uuid }
        entity_b_id: { type: string, format: uuid }
        relationship_type_id: { type: string, format: uuid }

    EntityRelationshipInput:
      type: object
      properties:
        entity_b_id: { type: string, format: uuid }
        relationship_type_id: { type: string, format: uuid }

    EntityRelationshipUpdate:
      type: object
      properties:
        relationships:
          type: array
          items:
            $ref: "#/components/schemas/EntityRelationshipInput"

    # ---- Utilities
    # ---- Contexts
    Context:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: Unique name identifying the context (e.g., "Style", "Mood").
        classification_type:
          type: string
          enum: [objective, subjective]
          description: Defines whether the context represents objective or subjective evaluation criteria.
        description:
          type: string
          description: Optional explanatory text describing the purpose or meaning of the context.
        is_active:
          type: boolean
          description: Indicates whether this context is currently available for use.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        id: "5c02a91e-7d4a-4f1e-9a91-0e4d2b5a20f8"
        name: "Clarity"
        classification_type: "subjective"
        description: "Used to evaluate the visual clarity of an image."
        is_active: true

    ContextInput:
      type: object
      required: [name]
      properties:
        name:
          type: string
          description: Name of the context to create or update.
        classification_type:
          type: string
          enum: [objective, subjective]
          description: Type of evaluation or classification this context represents.
        description:
          type: string
          description: Optional descriptive text about the context.
        is_active:
          type: boolean
          description: Whether the context should be active after creation.

    PartOfSpeech:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: Name of the grammatical classification (e.g., "noun", "adjective").
        description:
          type: string
          description: Optional description explaining how this part of speech is used in tagging or composition.
        is_active:
          type: boolean
          description: Indicates whether this classification is active and available for use.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        id: "2ef48d8b-bf7d-47b0-a928-5a4c3a95a71e"
        name: "adjective"
        description: "Describes a noun or pronoun, typically expressing a quality or attribute."
        is_active: true

    PartOfSpeechInput:
      type: object
      required: [name]
      properties:
        name:
          type: string
          description: Name of the grammatical classification.
        description:
          type: string
          description: Description explaining the role of this part of speech.
        is_active:
          type: boolean
          description: Whether this part of speech is active upon creation or update.

    # ---- Ratings
    RatingType:
      type: object
      description: |
        Defines the **semantic category** of a rating, giving meaning to its numeric value.
        For example, a rating type of `"likeness"` might express how much a user likes something,
        while `"clarity"` could measure how clear it is.
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the rating type.
        name:
          type: string
          description: Descriptive name of the rating type (e.g., "likeness", "clarity", "confidence").
        is_normalized:
          type: boolean
          description: |
            Indicates whether scores under this type are normalized to a [0–1] scale (`true`)
            or expressed as integer values on a [1–10] scale (`false`).
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - is_normalized
      example:
        id: "11111111-1111-1111-1111-111111111111"
        name: "likeness"
        is_normalized: false
        created_at: "2025-10-07T12:00:00Z"
        updated_at: "2025-10-07T12:00:00Z"

    RatingTypeInput:
      type: object
      description: |
        Input model for creating or updating a rating type.
        Use this to define a new semantic category for ratings or toggle normalization behavior.
      properties:
        name:
          type: string
          description: Descriptive name of the rating type.
        is_normalized:
          type: boolean
          default: false
          description: |
            `true` → normalized 0-1 range  
            `false` → integer 1–10 scale
      required:
        - name
      example:
        name: "clarity"
        is_normalized: true

    Rating:
      type: object
      description: |
        Represents a specific **rating value** within a rating type.
        Examples: `"excellent"` (score = 10, type = likeness) or `"very clear"` (score = 9, type = clarity).
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the rating.
        name:
          type: string
          description: Label used to identify the rating (e.g., "excellent", "9/10").
        score:
          type: integer
          minimum: 0
          maximum: 10
          description: |
            Numeric representation of the rating value.  
            If `is_normalized` = true on its rating type, this value should be between 0 and 1 (use integer 0–1 or float 0.0–1.0 as appropriate).
        description:
          type: string
          description: Optional longer explanation of the rating meaning.
        rating_type_id:
          type: string
          format: uuid
          description: Foreign key to the rating type this rating belongs to.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - score
        - rating_type_id
      example:
        id: "22222222-2222-2222-2222-222222222222"
        name: "Excellent"
        score: 10
        description: "Top-tier evaluation for likeness"
        rating_type_id: "11111111-1111-1111-1111-111111111111"
        created_at: "2025-10-07T12:00:00Z"
        updated_at: "2025-10-07T12:30:00Z"

    RatingInput:
      type: object
      description: |
        Input model for creating or updating a rating value within a given rating type.
        Each rating defines one discrete point or label on that type’s scale.
      properties:
        name:
          type: string
          description: Label or textual description for the rating (e.g., "9/10", "good").
        score:
          type: integer
          minimum: 0
          maximum: 10
          description: |
            Numeric score value for this rating.  
            The range [0–1] applies when the associated `rating_type.is_normalized` = true.
        description:
          type: string
          description: Optional longer explanation of this rating’s meaning.
        rating_type_id:
          type: string
          format: uuid
          description: Reference to the parent rating type.
      required:
        - name
        - score
        - rating_type_id
      example:
        name: "Very Clear"
        score: 9
        description: "High clarity rating"
        rating_type_id: "33333333-3333-3333-3333-333333333333"

    TagContextualRatingInput:
      type: object
      description: |
        Represents a rating applied to a tag within a specific context.
        Each contextual rating associates a tag with a context (e.g., "style", "emotion")
        and a rating (e.g., 9/10, "excellent").
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the contextual rating record.
        context_id:
          type: string
          format: uuid
          description: Context in which this rating applies.
        rating_id:
          type: string
          format: uuid
          description: Rating value or scale reference.
        user_id:
          type: string
          format: uuid
          description: Optional — identifies who applied the rating.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - context_id
        - rating_id
      example:
        id: "44444444-4444-4444-4444-444444444444"
        context_id: "55555555-5555-5555-5555-555555555555"
        rating_id: "66666666-6666-6666-6666-666666666666"
        user_id: "77777777-7777-7777-7777-777777777777"
        created_at: "2025-10-07T12:00:00Z"
        updated_at: "2025-10-07T12:30:00Z"

    ContextualRatingUpdate:
      type: object
      description: |
        Input model for applying or updating multiple contextual ratings for a tag.
        Used by `/tags/{id}/ratings` endpoints for bulk operations.
      properties:
        contextual_ratings:
          type: array
          items:
            $ref: "#/components/schemas/TagContextualRatingInput"
      required:
        - contextual_ratings
      example:
        contextual_ratings:
          - context_id: "55555555-5555-5555-5555-555555555555"
            rating_id: "66666666-6666-6666-6666-666666666666"
            user_id: "77777777-7777-7777-7777-777777777777"

    TagRelationshipRatingInput:
      type: object
      description: |
        Represents a rating applied to a relationship between two tags.
        Useful for scoring how relevant, clear, or strong a connection is between tags.
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the relationship rating record.
        tag_b_id:
          type: string
          format: uuid
          description: The target tag (Tag B) in the relationship.
        context_id:
          type: string
          format: uuid
          description: Context in which the relationship is rated.
        rating_id:
          type: string
          format: uuid
          description: Rating applied to this relationship.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - tag_b_id
        - context_id
        - rating_id
      example:
        id: "88888888-8888-8888-8888-888888888888"
        tag_b_id: "99999999-9999-9999-9999-999999999999"
        context_id: "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
        rating_id: "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"
        created_at: "2025-10-07T12:00:00Z"
        updated_at: "2025-10-07T12:30:00Z"

    EntityRelationshipRatingInput:
      type: object
      description: |
        Represents a contextual rating applied to a relationship between two entities.
        Mirrors the structure of tag relationship ratings.
      properties:
        id: { type: string, format: uuid }
        entity_b_id:
          type: string
          format: uuid
          description: The related or target entity (Entity B).
        context_id:
          type: string
          format: uuid
          description: The context under which this relationship was evaluated.
        rating_id:
          type: string
          format: uuid
          description: The rating value applied to this relationship.
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    EntityRelationshipRatingUpdate:
      type: object
      description: Request body for creating or updating relationship ratings between entities.
      properties:
        relationship_ratings:
          type: array
          items:
            $ref: "#/components/schemas/EntityRelationshipRatingInput"

    RelationshipRatingUpdate:
      type: object
      description: |
        Bulk-update model for applying or updating multiple ratings on relationships.
        Used by `/tags/{id}/relationship_ratings` endpoints.
      properties:
        relationship_ratings:
          type: array
          items:
            $ref: "#/components/schemas/TagRelationshipRatingInput"
      required:
        - relationship_ratings
      example:
        relationship_ratings:
          - tag_b_id: "99999999-9999-9999-9999-999999999999"
            context_id: "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
            rating_id: "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"

    UiLayout:
      type: object
      description: |
        A layout configuration profile defining how tags are grouped in the UI.
        Linked to a purpose tag (optional) and composed of multiple UI fields.

      properties:
        id: { type: string, format: uuid }
        purpose_tag_id: { type: string, format: uuid, nullable: true }
        name: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    UiLayoutInput:
      type: object
      properties:
        purpose_tag_id: { type: string, format: uuid, nullable: true }
        name: { type: string }

    UiGroup:
      type: object
      description: A named grouping label for UI sections (e.g., "Photographer", "Ingredients").

      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    UiGroupInput:
      type: object
      properties:
        name: { type: string }

    UiField:
      type: object
      description: |
        A field within a UI layout defining how tags under a given context and category are grouped.

      properties:
        id: { type: string, format: uuid }
        ui_layout_id: { type: string, format: uuid }
        ui_group_id: { type: string, format: uuid }
        context_id: { type: string, format: uuid }
        category_tag_id: { type: string, format: uuid }
        sort_order: { type: integer }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    UiFieldInput:
      type: object
      properties:
        ui_layout_id: { type: string, format: uuid }
        ui_group_id: { type: string, format: uuid }
        context_id: { type: string, format: uuid }
        category_tag_id: { type: string, format: uuid }
        sort_order: { type: integer }
