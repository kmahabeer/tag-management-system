openapi: 3.0.4
info:
  description: |
    The **Tag Management System API** provides RESTful access to all tag-related operations—creation, updates, deletion, linking, and querying of tags and their relationships.
    It also supports metadata assignment for tagged entities such as images, documents, or video stills.

    ## Principles
    - **RESTful architecture** — resource-based URIs and standard HTTP verbs (GET, POST, PATCH, DELETE)
    - **JSON payloads** — all requests and responses use JSON
    - **Frontend-controlled authentication** — only frontend clients (CLI, UI) interact with the API through validated tokens (except for development/testing)
  title: Tag Management System API
  version: 0.1.1
servers:
- description: Local development
  url: http://localhost:8000/api/v1
tags:
- description: "Endpoints providing service metadata, uptime information, and system\
    \ health diagnostics."
  name: meta
- description: "Core CRUD endpoints for managing tag records, each representing an\
    \ atomic or composite labeling concept."
  name: tags:core
- description: "Manage aliases for a specific tag, allowing alternative names or synonyms\
    \ for improved tagging and search flexibility."
  name: tags:aliases
- description: "System-wide alias management for creating, editing, and listing aliases\
    \ across all tags."
  name: tags:aliases:system
- description: "Manage relationships where the current tag acts as Tag A, defining\
    \ hierarchical or associative links like “Vehicle → Car.”"
  name: tags:relationships
- description: System-wide relationship management for maintaining all tag connections
    and traversing hierarchical or associative structures.
  name: tags:relationships:system
- description: "Manage component tags that form composite phrases for a base tag,\
    \ defining structure in multi-word tags like “very big red car.”"
  name: tags:compositions
- description: System-wide management of composite tag records linking base tags to
    their component tags.
  name: tags:compositions:system
- description: "Apply, view, or update contextual ratings for tags to capture subjective\
    \ or objective evaluations like likeness or clarity."
  name: tags:ratings
- description: "Manage ratings applied to tag relationships, measuring connection\
    \ strength or relevance (e.g., “Dog → Animal” = 0.95)."
  name: tags:relationship_ratings
- description: "Core entity CRUD endpoints for managing digital or physical assets\
    \ that can be tagged, rated, or related to other entities."
  name: entities:core
- description: "Endpoints for assigning, updating, or removing tags from entities,\
    \ including contextual tagging under defined semantic domains."
  name: entities:tags
- description: "Manage entity-to-entity relationships where the current entity acts\
    \ as the source, such as derivations or alternates."
  name: entities:relationships
- description: "System-wide endpoints for listing, creating, and modifying relationships\
    \ between any entities across the database."
  name: entities:relationships:system
- description: "Manage contextual ratings applied to specific entity-to-entity relationships,\
    \ measuring qualities like confidence or relevance."
  name: entities:relationship_ratings
- description: "Global endpoints for viewing, creating, and updating entity relationship\
    \ ratings across all entities."
  name: entities:relationship_ratings:system
- description: "Endpoints for applying or managing contextual ratings directly on\
    \ entities, representing evaluations like quality or completeness."
  name: entities:ratings
- description: "System-wide endpoints for listing, creating, and updating ratings\
    \ applied to entities across the database."
  name: entities:ratings:system
- description: "Manage purpose tags assigned to entities, defining their intended\
    \ role or function within a workflow or collection."
  name: entities:purposes
- description: "Global endpoints for managing all purpose tag assignments across entities,\
    \ including primary and secondary designations."
  name: entities:purposes:system
- description: "Manage version relationships between entities, representing alternates,\
    \ revisions, or derived versions through self-referential links."
  name: entities:versions
- description: "System-wide endpoints for managing all version-type relationships,\
    \ enabling traversal of entity lineage and version history."
  name: entities:versions:system
- description: "Manage grammatical classifications of tags, such as nouns, adjectives,\
    \ and adverbs, which govern composition and validation logic."
  name: utilities:part-of-speech
- description: "Manage semantic contexts that define how tags, entities, and ratings\
    \ are grouped and interpreted within specific domains."
  name: utilities:contexts
- description: "Manage the global rating schema including rating types, scales, and\
    \ definitions used for tag, entity, and relationship evaluations."
  name: utilities:ratings:system
- description: "Manage UI layout profiles that organize tags, groups, and contexts\
    \ for structured presentation in user interfaces."
  name: ui:layouts
- description: Define reusable UI grouping elements that segment layouts into labeled
    sections for improved visual organization.
  name: ui:groups
- description: "Manage individual UI fields that map tags or contexts to specific\
    \ regions within layouts, determining display and behavior."
  name: ui:fields
paths:
  /meta/health:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_meta_health_get_200_response"
          description: Service is healthy
      summary: Health check
      tags:
      - meta
  /tags:
    get:
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          example: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags_get_200_response"
          description: Paginated list of tags
      summary: List all tags
      tags:
      - tags:core
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
          description: Tag created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid input
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag already exists
      summary: Create a new tag
      tags:
      - tags:core
  /tags/{id}:
    delete:
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Tag deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag not found
      summary: Delete a tag
      tags:
      - tags:core
    get:
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
          description: Tag found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag not found
      summary: Retrieve tag by ID
      tags:
      - tags:core
    patch:
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagInput"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
          description: Tag updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag not found
      summary: Update tag metadata
      tags:
      - tags:core
  /tags/{id}/aliases:
    delete:
      description: |
        Deletes every alias associated with this tag. Use cautiously — all linked alias names will be removed.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Aliases deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag not found
      summary: Delete all aliases for a tag
      tags:
      - tags:aliases
    get:
      description: |
        Retrieve all alias names that belong to this tag. Each alias points to this tag as its canonical reference.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__aliases_get_200_response"
          description: List of aliases for the tag
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag not found
      summary: List aliases for a tag
      tags:
      - tags:aliases
    patch:
      description: |
        Updates all aliases for this tag. Existing aliases may be replaced with a new set of names.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AliasUpdate"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__aliases_patch_200_response"
          description: Aliases updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag not found
      summary: Bulk update aliases for a tag
      tags:
      - tags:aliases
    post:
      description: |
        Adds a new alias for this tag. The alias must be unique across the entire system.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_tags__id__aliases_post_request"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
          description: Alias created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid input or duplicate alias
      summary: Create alias for a tag
      tags:
      - tags:aliases
  /tags/{id}/aliases/{alias_id}:
    delete:
      description: |
        Deletes a single alias record from this tag.
        The canonical tag itself remains unaffected.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: alias_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Alias deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Alias not found
      summary: Delete alias for a tag
      tags:
      - tags:aliases
    get:
      description: |
        Retrieves a single alias record belonging to this tag.
        Useful for viewing details or verifying the canonical tag relationship.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique identifier of the alias record
        explode: false
        in: path
        name: alias_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
          description: Alias found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Alias not found
      summary: Retrieve alias for a tag
      tags:
      - tags:aliases
    patch:
      description: |
        Updates the name or reassigns the alias to a different canonical tag.
        Typically used to rename an alias or correct its association.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: alias_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_tags__id__aliases__alias_id__patch_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
          description: Alias updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Alias not found
      summary: Update alias for a tag
      tags:
      - tags:aliases
  /tag-aliases:
    get:
      description: |
        Retrieve all aliases across the system. Supports optional filtering by canonical `tag_id`.
      parameters:
      - description: Filter aliases belonging to a specific tag
        explode: true
        in: query
        name: tag_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__aliases_get_200_response"
          description: List of tag aliases
      summary: List all tag aliases
      tags:
      - tags:aliases:system
    post:
      description: |
        Creates a new alias and links it to a specific tag. The alias name must be unique across the system.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_tag_aliases_post_request"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
          description: Alias created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid input or duplicate alias
      summary: Create a tag alias
      tags:
      - tags:aliases:system
  /tag-aliases/{id}:
    delete:
      description: Deletes a tag alias by its unique ID.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Alias deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Alias not found
      summary: Delete alias
      tags:
      - tags:aliases:system
    get:
      description: Retrieve a specific tag alias by its unique ID.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
          description: Alias found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Alias not found
      summary: Retrieve alias by ID
      tags:
      - tags:aliases:system
    patch:
      description: |
        Updates the alias name or reassigns it to a different canonical tag.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_tag_aliases_post_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
          description: Alias updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Alias not found
      summary: Update alias
      tags:
      - tags:aliases:system
  /tags/{id}/relationships:
    delete:
      description: |
        Deletes all relationships where this tag is **Tag A** (the source).
        Use with caution — this removes every outgoing relationship for this tag.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Relationships deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag not found
      summary: Delete relationships for a tag
      tags:
      - tags:relationships
    get:
      description: |
        Retrieve all relationships where this tag acts as **Tag A** (the dominant/source).
        Use the optional `direction` query parameter to fetch relationships where this tag
        is either the **source** or the **target**.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: |
          Controls directionality of the relationships.
          - `outgoing`: tag acts as **Tag A**
          - `incoming`: tag acts as **Tag B**
        explode: true
        in: query
        name: direction
        required: false
        schema:
          default: outgoing
          enum:
          - outgoing
          - incoming
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__relationships_get_200_response"
          description: List of tag relationships
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag not found
      summary: List relationships for a tag
      tags:
      - tags:relationships
    patch:
      description: |
        Bulk update of relationships where this tag is the **source (Tag A)**.
        Typically used to modify multiple related tags or relationship types at once.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RelationshipUpdate"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__relationships_get_200_response"
          description: Relationships updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag not found
      summary: Update relationships for a tag
      tags:
      - tags:relationships
    post:
      description: |
        Creates a new relationship originating from this tag as **Tag A**.
        The request body specifies the related tag (`tag_b_id`) and the `relationship_type_id`.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagRelationshipInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
          description: Relationship created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid input
      summary: Create a relationship for a tag
      tags:
      - tags:relationships
  /tags/{id}/relationships/{relationship_id}:
    delete:
      description: |
        Deletes a single tag relationship record where this tag acts as **Tag A**.
        This removes the association between the two tags without deleting either tag.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Relationship deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship not found
      summary: Delete tag relationship
      tags:
      - tags:relationships
    get:
      description: |
        Retrieves a single relationship record where this tag acts as **Tag A** (the dominant or source tag).
        This allows inspection of one connection between tags, such as "Vehicle → Car".
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique identifier of the tag relationship record
        explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
          description: Relationship found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship not found
      summary: Retrieve tag relationship
      tags:
      - tags:relationships
    patch:
      description: |
        Updates the relationship type or description of a single tag-to-tag relationship.
        The participating tags (`tag_a_id`, `tag_b_id`) remain immutable after creation.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_tags__id__relationships__relationship_id__patch_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
          description: Relationship updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship not found
      summary: Update tag relationship
      tags:
      - tags:relationships
  /tag-relationships:
    get:
      description: |
        Retrieve all tag relationships in the system.
        Supports optional filters for `tag_a_id`, `tag_b_id`, and `relationship_type_id`.
      parameters:
      - description: Filter relationships by source tag
        explode: true
        in: query
        name: tag_a_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Filter relationships by target tag
        explode: true
        in: query
        name: tag_b_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Filter relationships by type
        explode: true
        in: query
        name: relationship_type_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__relationships_get_200_response"
          description: List of tag relationships
      summary: List all tag relationships
      tags:
      - tags:relationships:system
    post:
      description: |
        Creates a new tag relationship. Both `tag_a_id` (source) and `tag_b_id` (target)
        must be provided explicitly in the request body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagRelationship"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
          description: Tag relationship created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid input
      summary: Create a tag relationship
      tags:
      - tags:relationships:system
  /tag-relationships/{id}:
    delete:
      description: Permanently deletes a tag relationship by its unique ID.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Relationship deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship not found
      summary: Delete a tag relationship
      tags:
      - tags:relationships:system
    get:
      description: Returns a single tag relationship resource.
      parameters:
      - description: Unique identifier of the tag relationship
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
          description: Relationship found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship not found
      summary: Retrieve a tag relationship by ID
      tags:
      - tags:relationships:system
    patch:
      description: |
        Updates the `relationship_type_id` or `description` of a relationship.
        `tag_a_id` and `tag_b_id` may not be changed after creation.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_tag_relationships__id__patch_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationship"
          description: Relationship updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship not found
      summary: Update a tag relationship
      tags:
      - tags:relationships:system
  /tags/{id}/compositions:
    delete:
      description: |
        Deletes all component links for this base tag, effectively breaking the composite phrase.
        The base tag itself remains intact as a standalone tag.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Composition deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Base tag not found
      summary: Delete composition for a tag
      tags:
      - tags:compositions
    get:
      description: |
        Retrieves all **component tags** that form the composition of this base tag.
        Each component is returned with its `position` to indicate order in the phrase.
        For example, for the tag `"very big car"`, this would return:
        - `"very"` (position 1)
        - `"big"`  (position 2)
        - `"car"`  (position 3)
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__compositions_get_200_response"
          description: List of components for the specified base tag
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Base tag not found
      summary: List components of a composite tag
      tags:
      - tags:compositions
    patch:
      description: |
        Bulk-updates the composition of this base tag.
        Used to reorder, replace, or remove multiple components in a single request.
        The full updated list of component tags should be provided in order.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompositionUpdate"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__compositions_get_200_response"
          description: Composition updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Base tag not found
      summary: Update composition for a tag
      tags:
      - tags:compositions
    post:
      description: |
        Adds a new **component tag** to the composition of this base tag.
        The `component_tag_id` specifies which tag to add, and `position` defines where
        in the phrase the component should appear.
        The combination `(base_tag_id, component_tag_id, position)` must be unique.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagComponentInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagComponent"
          description: Component added to composition
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: "Invalid composition (e.g., duplicate position or grammatical\
            \ rule violation)"
      summary: Add component to a composite tag
      tags:
      - tags:compositions
  /tags/{id}/compositions/{composition_id}:
    delete:
      description: |
        Deletes a single component link from this tag’s composition.
        The component tag itself remains unaffected, but it is no longer part of this composite phrase.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: composition_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Composition component deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Composition component not found
      summary: Delete composition component
      tags:
      - tags:compositions
    get:
      description: |
        Retrieves a single component link belonging to this base tag’s composition.
        Each record connects the base tag (the composite phrase) to one component tag,
        with a specific position defining order in the phrase.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique identifier of the composition record
        explode: false
        in: path
        name: composition_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagComponent"
          description: Composition component found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Composition component not found
      summary: Retrieve component of a composite tag
      tags:
      - tags:compositions
    patch:
      description: |
        Updates metadata for a single composition component record.
        The participating tags (`base_tag_id`, `component_tag_id`) remain immutable after creation.
        Only the `position` value can be modified.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: composition_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_tags__id__compositions__composition_id__patch_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagComponent"
          description: Composition component updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Composition component not found
      summary: Update composition component
      tags:
      - tags:compositions
  /tag-compositions:
    get:
      description: |
        Retrieves all composition records in the system.
        Each record describes a relationship between a **base tag** and one of its **component tags**.
        Optional query parameters allow filtering by `base_tag_id` or `component_tag_id`.
      parameters:
      - description: Filter compositions by base tag
        explode: true
        in: query
        name: base_tag_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Filter compositions by a specific component tag
        explode: true
        in: query
        name: component_tag_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tag_compositions_get_200_response"
          description: List of tag compositions
      summary: List all tag compositions
      tags:
      - tags:compositions:system
    post:
      description: |
        Creates a new composition link between a base tag and a component tag.
        The `position` field defines the component’s place in the sequence.
        Used for inserting new composite definitions globally without referencing a specific tag path.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_tag_compositions_post_request"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagComponent"
          description: Composition created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid input or duplicate composition
      summary: Create a tag composition record
      tags:
      - tags:compositions:system
  /tag-compositions/{id}:
    delete:
      description: Permanently deletes a single composition record by its ID.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Composition deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Composition not found
      summary: Delete a tag composition
      tags:
      - tags:compositions:system
    get:
      description: Retrieve a single composition record by its unique identifier.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagComponent"
          description: Composition found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Composition not found
      summary: Retrieve tag composition by ID
      tags:
      - tags:compositions:system
    patch:
      description: |
        Updates the `position` or corrects metadata of a composition record.
        The `base_tag_id` and `component_tag_id` cannot be changed after creation.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_tag_compositions__id__patch_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagComponent"
          description: Composition updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Composition not found
      summary: Update a tag composition
      tags:
      - tags:compositions:system
  /tags/{id}/ratings:
    delete:
      description: |
        Removes all contextual ratings associated with this tag.
        Use cautiously — this clears all user-assigned ratings for the tag.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Contextual ratings deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag not found
      summary: Delete contextual ratings for a tag
      tags:
      - tags:ratings
    get:
      description: |
        Retrieve all contextual ratings applied to this tag, grouped by context.
        For example, "Dog" might have a `likeness` rating of 9/10 and a `clarity` rating of 8/10.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__ratings_get_200_response"
          description: List of contextual ratings for the tag
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag not found
      summary: List contextual ratings for a tag
      tags:
      - tags:ratings
    patch:
      description: |
        Applies or updates contextual ratings for this tag across one or more contexts.
        Used to express subjective or objective evaluations (e.g., "Likeness", "Clarity").
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContextualRatingUpdate"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__ratings_get_200_response"
          description: Contextual ratings applied or updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag or context not found
      summary: Apply or update contextual ratings for a tag
      tags:
      - tags:ratings
  /tags/{id}/ratings/{rating_id}:
    delete:
      description: |
        Deletes a single contextual rating record from this tag.
        The rating definition itself (in `/ratings`) remains unaffected.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: rating_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Contextual rating deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Contextual rating not found
      summary: Delete a contextual rating for a tag
      tags:
      - tags:ratings
    get:
      description: |
        Retrieves a specific contextual rating record for this tag, identified by its unique rating assignment ID.
        This does **not** refer to the `/ratings` table entry itself, but to the *rating instance* assigned to the tag.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique identifier of the contextual rating record
        explode: false
        in: path
        name: rating_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagContextualRatingInput"
          description: Contextual rating found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Contextual rating not found
      summary: Retrieve a contextual rating for a tag
      tags:
      - tags:ratings
    patch:
      description: |
        Updates the rating, context, or user assignment for a specific contextual rating record.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: rating_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagContextualRatingInput"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagContextualRatingInput"
          description: Contextual rating updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Contextual rating not found
      summary: Update a contextual rating for a tag
      tags:
      - tags:ratings
  /tags/{id}/relationship_ratings:
    delete:
      description: |
        Deletes all ratings assigned to relationships where this tag acts as **Tag A**.
        This removes evaluations on all related connections for the tag.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Relationship ratings deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag not found
      summary: Delete relationship ratings for a tag
      tags:
      - tags:relationship_ratings
    get:
      description: |
        Retrieve all ratings applied to relationships where this tag acts as **Tag A**.
        For example, "Dog → Animal" may have a `relevance` rating of 0.95.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__relationship_ratings_get_200_response"
          description: List of ratings for relationships originating from this tag
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag not found
      summary: List relationship ratings for a tag
      tags:
      - tags:relationship_ratings
    patch:
      description: |
        Applies or updates ratings on relationships where this tag acts as **Tag A**.
        Each rating reflects a subjective or objective evaluation of the connection strength or quality.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RelationshipRatingUpdate"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__relationship_ratings_patch_200_response"
          description: Relationship ratings recorded
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag or related tag not found
      summary: Apply or update relationship ratings for a tag
      tags:
      - tags:relationship_ratings
  /tags/{id}/relationship_ratings/{rating_id}:
    delete:
      description: |
        Deletes a single relationship rating record where this tag acts as **Tag A**.
        This operation removes only the rating, not the underlying tag relationship itself.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: rating_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Relationship rating deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship rating not found
      summary: Delete relationship rating for a tag
      tags:
      - tags:relationship_ratings
    get:
      description: |
        Retrieves a single relationship rating record where this tag acts as **Tag A** (the source).
        Each record represents a rating applied to one connection between Tag A and Tag B
        under a specific context.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique identifier of the relationship rating record
        explode: false
        in: path
        name: rating_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationshipRatingInput"
          description: Relationship rating found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship rating not found
      summary: Retrieve relationship rating for a tag
      tags:
      - tags:relationship_ratings
    patch:
      description: |
        Updates an existing relationship rating record.
        The linked tags (Tag A, Tag B) cannot be changed after creation, but you can modify
        the `context_id` or `rating_id` to reflect a new evaluation.
      parameters:
      - description: Unique identifier for the tag
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: rating_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_tags__id__relationship_ratings__rating_id__patch_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagRelationshipRatingInput"
          description: Relationship rating updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship rating not found
      summary: Update relationship rating for a tag
      tags:
      - tags:relationship_ratings
  /entities:
    get:
      description: Retrieve a paginated list of entities (digital or physical assets)
        tracked by the system.
      parameters:
      - description: Maximum number of entities to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: integer
        style: form
      - description: Number of entities to skip before starting to collect the result
          set.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          example: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities_get_200_response"
          description: Paginated list of entities
      summary: List all entities
      tags:
      - entities:core
    post:
      description: "Create a new entity record with optional metadata, location, and\
        \ primary flag."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
          description: Entity created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid input
      summary: Create a new entity
      tags:
      - entities:core
  /entities/{id}:
    delete:
      description: Permanently delete an entity record. Downstream cleanup is implementation-specific.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Entity deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity not found
      summary: Delete an entity
      tags:
      - entities:core
    get:
      description: Fetch a single entity by its unique identifier.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
          description: Entity found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity not found
      summary: Retrieve entity by ID
      tags:
      - entities:core
    patch:
      description: "Update entity properties such as name, location, is_primary, or\
        \ metadata."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityInput"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
          description: Entity updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity not found
      summary: Update an entity
      tags:
      - entities:core
  /entities/{id}/tags:
    get:
      description: "Retrieve all tags currently assigned to this entity, including\
        \ contextual and metadata details."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__tags_get_200_response"
          description: List of assigned tags
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity not found
      summary: List tags assigned to an entity
      tags:
      - entities:tags
    patch:
      description: "Assign or unassign tags for this entity, including updates to\
        \ context or metadata on existing assignments."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityTagUpdate"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__tags_patch_200_response"
          description: Tag assignments updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity or tags not found
      summary: Update tags assigned to an entity
      tags:
      - entities:tags
  /entities/{id}/tags/{tag_id}:
    delete:
      description: Unassign a specific tag from this entity while leaving the tag
        itself intact in the database.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique identifier for the tag assignment
        explode: false
        in: path
        name: tag_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__tags__tag_id__delete_200_response"
          description: Tag unassigned from entity
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity or tag assignment not found
      summary: Remove tag assignment from entity
      tags:
      - entities:tags
    get:
      description: "Retrieve information about a specific tag attached to this entity,\
        \ including contextual data if present."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique identifier for the tag assignment
        explode: false
        in: path
        name: tag_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityTagAssignment"
          description: Tag assignment found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Tag assignment not found
      summary: Retrieve specific tag assignment
      tags:
      - entities:tags
  /entities/{id}/purposes:
    get:
      description: "Retrieve all purpose tags assigned to this entity, describing\
        \ its functional role or intended use within a larger workflow or dataset."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__purposes_get_200_response"
          description: List of purposes assigned to the entity
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity not found
      summary: List purpose tags assigned to an entity
      tags:
      - entities:purposes
    patch:
      description: "Add, remove, or update the set of purpose tags assigned to this\
        \ entity, designating its functional role within a workflow or dataset."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityPurposeUpdate"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__purposes_patch_200_response"
          description: Purposes updated for the entity
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity or purpose tag not found
      summary: Update purpose tags for an entity
      tags:
      - entities:purposes
  /entities/{id}/purposes/{purpose_id}:
    delete:
      description: Remove a purpose assignment from this entity while leaving the
        purpose tag itself intact in the database.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: purpose_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Purpose record deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Purpose record not found
      summary: Delete a specific purpose tag from an entity
      tags:
      - entities:purposes
    get:
      description: "Retrieve information about a specific purpose tag assigned to\
        \ this entity, including whether it is marked as primary or secondary."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique identifier for the purpose record
        explode: false
        in: path
        name: purpose_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityPurposeInput"
          description: Purpose record found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Purpose record not found
      summary: Retrieve a specific purpose tag for an entity
      tags:
      - entities:purposes
    patch:
      description: "Update a single purpose tag assignment for this entity, such as\
        \ marking it as primary or changing the linked purpose tag."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: purpose_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_entities__id__purposes__purpose_id__patch_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityPurposeInput"
          description: Purpose record updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Purpose record not found
      summary: Update a specific purpose tag for an entity
      tags:
      - entities:purposes
  /entities/{id}/versions:
    get:
      description: "Retrieve all entities that represent alternate, prior, or derived\
        \ versions of this entity. Each record reflects a version relationship derived\
        \ from `entity_relationships`."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__versions_get_200_response"
          description: List of entity versions
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity not found
      summary: List versions of an entity
      tags:
      - entities:versions
    patch:
      description: "Create or modify version links between this entity and others.\
        \ Internally, these map to entries in `entity_relationships` with type `\"\
        version-of\"`."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_entities__id__versions_patch_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__versions_patch_200_response"
          description: Versions updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity or related version not found
      summary: Update version relationships for an entity
      tags:
      - entities:versions
  /entities/{id}/versions/{version_id}:
    delete:
      description: "Remove the version link between this entity and another. Both\
        \ entities remain intact, but their version association is deleted."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: version_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Version relationship deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Version relationship not found
      summary: Delete a version relationship
      tags:
      - entities:versions
    get:
      description: "Retrieve the relationship record linking this entity to a specific\
        \ version, as defined by the `\"version-of\"` relationship type."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique identifier for the related version entity.
        explode: false
        in: path
        name: version_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationship"
          description: Version relationship found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Version relationship not found
      summary: Retrieve a specific version of an entity
      tags:
      - entities:versions
    patch:
      description: "Update properties of a version relationship (e.g., change relationship\
        \ type or metadata). The participating entities remain immutable."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: version_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_entities__id__versions__version_id__patch_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationship"
          description: Version relationship updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Version relationship not found
      summary: Update a specific version relationship
      tags:
      - entities:versions
  /entities/{id}/ratings:
    get:
      description: "Retrieve all contextual ratings applied to this entity, including\
        \ rating values, types, and context metadata."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__ratings_get_200_response"
          description: List of ratings for this entity
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity not found
      summary: List ratings applied to an entity
      tags:
      - entities:ratings
    patch:
      description: "Apply or update one or more contextual ratings for this entity.\
        \ Each rating reflects an evaluative measure such as quality, accuracy, or\
        \ completeness."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityContextualRatingUpdate"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__ratings_patch_200_response"
          description: Ratings updated or applied
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity or context not found
      summary: Update or apply ratings for an entity
      tags:
      - entities:ratings
  /entities/{id}/ratings/{rating_id}:
    delete:
      description: Permanently delete a single rating record applied to this entity.
        This operation does not affect rating definitions or contexts.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: rating_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Rating record deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rating record not found
      summary: Delete a specific entity rating
      tags:
      - entities:ratings
    get:
      description: Retrieve a single contextual rating record applied to this entity
        under a given context.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique identifier of the rating record
        explode: false
        in: path
        name: rating_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityContextualRatingInput"
          description: Rating record found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rating record not found
      summary: Retrieve a specific rating for an entity
      tags:
      - entities:ratings
    patch:
      description: Update the context or rating value for a single entity rating record.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: rating_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_entities__id__ratings__rating_id__patch_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityContextualRatingInput"
          description: Rating record updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rating record not found
      summary: Update a specific entity rating
      tags:
      - entities:ratings
  /entities/{id}/relationships:
    get:
      description: Retrieve all relationships where this entity acts as **Entity A**
        (the source). Each record defines a directional link to another entity.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__relationships_get_200_response"
          description: List of relationships for the entity
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity not found
      summary: List relationships for an entity
      tags:
      - entities:relationships
    patch:
      description: "Create or modify relationships where this entity acts as **Entity\
        \ A**, defining links to one or more target entities (**Entity B**)."
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipUpdate"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__relationships_patch_200_response"
          description: Relationships updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity or related entity not found
      summary: Update relationships for an entity
      tags:
      - entities:relationships
  /entities/{id}/relationships/{relationship_id}:
    delete:
      description: Permanently remove a relationship link between this entity (**Entity
        A**) and another (**Entity B**) without deleting either entity.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Relationship deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship not found
      summary: Delete a specific entity relationship
      tags:
      - entities:relationships
    get:
      description: "Retrieve a single relationship record where this entity acts as\
        \ **Entity A**, such as “Original Render → Color Corrected Version.”"
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique identifier of the relationship record
        explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationship"
          description: Relationship found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship not found
      summary: Retrieve a specific entity relationship
      tags:
      - entities:relationships
    patch:
      description: Update the relationship type or description for an existing link.
        The participating entities remain immutable.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_entities__id__relationships__relationship_id__patch_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationship"
          description: Relationship updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship not found
      summary: Update a specific entity relationship
      tags:
      - entities:relationships
  /entities/{id}/relationship_ratings:
    get:
      description: Retrieve all relationship rating records where this entity acts
        as **Entity A** (the source). Each record rates the connection to another
        entity.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__relationship_ratings_get_200_response"
          description: List of relationship ratings for this entity
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity not found
      summary: List relationship ratings for an entity
      tags:
      - entities:relationship_ratings
    patch:
      description: Apply or update contextual ratings for relationships where this
        entity acts as **Entity A**. Ratings measure qualities such as confidence
        or clarity of the connection.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipRatingUpdate"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__relationship_ratings_patch_200_response"
          description: Relationship ratings updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Entity or related entity not found
      summary: Update or create relationship ratings for an entity
      tags:
      - entities:relationship_ratings
  /entities/{id}/relationship_ratings/{rating_id}:
    delete:
      description: Permanently delete a relationship rating record for this entity.
        The entities and relationship itself remain intact.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: rating_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Relationship rating deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship rating not found
      summary: Delete a single entity relationship rating
      tags:
      - entities:relationship_ratings
    get:
      description: Retrieve a single relationship rating record for a connection where
        this entity acts as **Entity A**.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Unique identifier of the relationship rating record
        explode: false
        in: path
        name: rating_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationshipRatingInput"
          description: Relationship rating found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship rating not found
      summary: Retrieve a single entity relationship rating
      tags:
      - entities:relationship_ratings
    patch:
      description: Update the rating value or context for a specific entity-to-entity
        relationship record. The participating entities remain immutable.
      parameters:
      - description: Unique identifier for the entity
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: rating_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_tags__id__relationship_ratings__rating_id__patch_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationshipRatingInput"
          description: Relationship rating updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Relationship rating not found
      summary: Update a specific entity relationship rating
      tags:
      - entities:relationship_ratings
  /entity-relationships:
    get:
      description: "Retrieve a system-wide list of all entity-to-entity relationships,\
        \ regardless of source or target."
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__relationships_get_200_response"
          description: List of entity relationships
      summary: List all entity relationships
      tags:
      - entities:relationships:system
    post:
      description: "Create a new relationship between two entities, defining their\
        \ linkage type and direction."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationship"
          description: Relationship created
      summary: Create a new entity relationship
      tags:
      - entities:relationships:system
  /entity-relationships/{id}:
    delete:
      description: Permanently remove an entity-to-entity relationship record from
        the system.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Relationship deleted
      summary: Delete a specific entity relationship
      tags:
      - entities:relationships:system
    patch:
      description: Update the relationship type or description for a specific relationship
        record.
      parameters:
      - description: Unique identifier for the relationship record
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipInput"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationship"
          description: Relationship updated
      summary: Update a specific entity relationship
      tags:
      - entities:relationships:system
  /entity-relationship-ratings:
    get:
      description: Retrieve a global list of all contextual ratings applied to entity-to-entity
        relationships.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__relationship_ratings_get_200_response"
          description: List of entity relationship ratings
      summary: List all entity relationship ratings
      tags:
      - entities:relationship_ratings:system
    post:
      description: "Apply a rating to a relationship between two entities, capturing\
        \ its confidence or quality."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipRatingInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationshipRatingInput"
          description: Relationship rating created
      summary: Create a new entity relationship rating
      tags:
      - entities:relationship_ratings:system
  /entity-relationship-ratings/{id}:
    delete:
      description: Permanently delete a relationship rating record between two entities.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Relationship rating deleted
      summary: Delete a specific entity relationship rating
      tags:
      - entities:relationship_ratings:system
    patch:
      description: Modify the rating value or context for a specific relationship
        rating record.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipRatingInput"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationshipRatingInput"
          description: Relationship rating updated
      summary: Update a specific entity relationship rating
      tags:
      - entities:relationship_ratings:system
  /entity-ratings:
    get:
      description: Retrieve a global list of all contextual ratings applied directly
        to entities.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__ratings_get_200_response"
          description: List of entity ratings
      summary: List all entity ratings
      tags:
      - entities:ratings:system
    post:
      description: Apply a new contextual rating to a specific entity.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityContextualRatingInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityContextualRatingInput"
          description: Entity rating created
      summary: Create a new entity rating
      tags:
      - entities:ratings:system
  /entity-ratings/{id}:
    delete:
      description: Permanently remove a contextual rating record from the database.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Entity rating deleted
      summary: Delete a specific entity rating
      tags:
      - entities:ratings:system
    patch:
      description: Modify the rating value or context for an existing entity rating
        record.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityContextualRatingInput"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityContextualRatingInput"
          description: Entity rating updated
      summary: Update a specific entity rating
      tags:
      - entities:ratings:system
  /entity-purposes:
    get:
      description: "Retrieve all purpose tag assignments across all entities, including\
        \ which are primary."
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entities__id__purposes_get_200_response"
          description: List of all purpose records
      summary: List all entity purposes
      tags:
      - entities:purposes:system
    post:
      description: "Assign a new purpose tag to an entity, optionally marking it as\
        \ primary."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityPurposeInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityPurposeInput"
          description: Purpose record created
      summary: Create a new purpose assignment
      tags:
      - entities:purposes:system
  /entity-purposes/{id}:
    delete:
      description: Permanently delete a purpose tag assignment from the database.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Purpose record deleted
      summary: Delete a specific purpose record
      tags:
      - entities:purposes:system
    patch:
      description: Update an existing purpose assignment across any entity.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityPurposeInput"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityPurposeInput"
          description: Purpose record updated
      summary: Update a specific purpose record
      tags:
      - entities:purposes:system
  /entity-versions:
    get:
      description: "Retrieve all version-type relationships (e.g., “version-of”) across\
        \ the system."
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_entity_versions_get_200_response"
          description: List of version relationships
      summary: List all entity version relationships
      tags:
      - entities:versions:system
    post:
      description: Create a relationship between two entities marked as a version
        link (“version-of” type).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRelationshipInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityRelationship"
          description: Version relationship created
      summary: Create a new version relationship
      tags:
      - entities:versions:system
  /contexts:
    get:
      description: "Retrieve all semantic contexts under which tags, entities, or\
        \ relationships can be grouped, rated, or classified."
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_contexts_get_200_response"
          description: List of contexts
      summary: List all contexts
      tags:
      - utilities:contexts
    post:
      description: "Create a new semantic or evaluative context for use across tags\
        \ and entities (e.g., “Style”, “Clarity”, or “Mood”)."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContextInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Context"
          description: Context created
      summary: Create a new context
      tags:
      - utilities:contexts
  /contexts/{id}:
    delete:
      description: "Permanently delete a context record, preventing its further use\
        \ in tagging, rating, or classification."
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Context deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Context not found
      summary: Delete a specific context
      tags:
      - utilities:contexts
    get:
      description: "Retrieve a single context record by ID, including its classification\
        \ type and active status."
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Context"
          description: Context found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Context not found
      summary: Retrieve a specific context
      tags:
      - utilities:contexts
    patch:
      description: "Modify the name, classification type, description, or active status\
        \ of a context record."
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContextInput"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Context"
          description: Context updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Context not found
      summary: Update a specific context
      tags:
      - utilities:contexts
  /parts-of-speech:
    get:
      description: "Retrieve all grammatical classifications used to categorize tags\
        \ (e.g., noun, adjective, adverb)."
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_parts_of_speech_get_200_response"
          description: List of parts of speech
      summary: List all parts of speech
      tags:
      - utilities:part-of-speech
    post:
      description: Define a new grammatical classification for use in tag labeling
        or composition validation.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartOfSpeechInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartOfSpeech"
          description: Part of speech created
      summary: Create a new part of speech
      tags:
      - utilities:part-of-speech
  /parts-of-speech/{id}:
    delete:
      description: Permanently delete a grammatical classification record from the
        database.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Part of speech deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Part of speech not found
      summary: Delete a specific part of speech
      tags:
      - utilities:part-of-speech
    get:
      description: Retrieve details of a specific grammatical classification by its
        unique identifier.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartOfSpeech"
          description: Part of speech found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Part of speech not found
      summary: Retrieve a specific part of speech
      tags:
      - utilities:part-of-speech
    patch:
      description: "Modify the name, description, or activation status of a grammatical\
        \ classification record."
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartOfSpeechInput"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartOfSpeech"
          description: Part of speech updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Part of speech not found
      summary: Update a specific part of speech
      tags:
      - utilities:part-of-speech
  /ratings:
    get:
      description: "Retrieve all available rating values defined across the system,\
        \ including their scores, descriptions, and rating types."
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_ratings_get_200_response"
          description: List of ratings
      summary: List all ratings
      tags:
      - utilities:ratings:system
    post:
      description: "Create a new rating value for a defined rating type, such as \"\
        Excellent\" under \"Likeness\" or \"10/10\" under \"Clarity\"."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
          description: Rating created
      summary: Create a new rating
      tags:
      - utilities:ratings:system
  /ratings/{id}:
    delete:
      description: Permanently remove a rating record. Existing entity or tag ratings
        referencing this ID should be invalidated or reassigned.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Rating deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rating not found
      summary: Delete a specific rating
      tags:
      - utilities:ratings:system
    get:
      description: "Retrieve details of a specific rating record, including its name,\
        \ numeric score, and associated rating type."
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
          description: Rating found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rating not found
      summary: Retrieve a specific rating
      tags:
      - utilities:ratings:system
    patch:
      description: "Modify the name, score, description, or rating type of a rating\
        \ record."
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingInput"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
          description: Rating updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rating not found
      summary: Update a specific rating
      tags:
      - utilities:ratings:system
  /rating-types:
    get:
      description: "Retrieve all defined rating categories, such as \"Likeness\",\
        \ \"Confidence\", or \"Clarity\", which group rating values by meaning."
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_rating_types_get_200_response"
          description: List of rating types
      summary: List all rating types
      tags:
      - utilities:ratings:system
    post:
      description: Define a new rating category to group ratings under a common semantic
        meaning.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingTypeInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingType"
          description: Rating type created
      summary: Create a new rating type
      tags:
      - utilities:ratings:system
  /rating-types/{id}:
    delete:
      description: Permanently delete a rating type record. All ratings depending
        on this type should be removed or migrated.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Rating type deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rating type not found
      summary: Delete a specific rating type
      tags:
      - utilities:ratings:system
    get:
      description: "Retrieve information about a specific rating type, including whether\
        \ it is normalized."
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingType"
          description: Rating type found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rating type not found
      summary: Retrieve a specific rating type
      tags:
      - utilities:ratings:system
    patch:
      description: Modify the name or normalization status of a rating type record.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingTypeInput"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingType"
          description: Rating type updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rating type not found
      summary: Update a specific rating type
      tags:
      - utilities:ratings:system
  /ui/layouts:
    get:
      description: Retrieve all UI layout profiles that define how tags and contexts
        are organized in the user interface.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_ui_layouts_get_200_response"
          description: List of UI layouts
      summary: List all UI layouts
      tags:
      - ui:layouts
    post:
      description: Create a new layout profile for organizing tag groups and fields
        for a specific purpose.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiLayoutInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiLayout"
          description: Layout created
      summary: Create a new UI layout
      tags:
      - ui:layouts
  /ui/layouts/{id}:
    delete:
      description: Permanently delete a layout profile and any related groups or fields
        should be reassigned or removed.
      parameters:
      - description: Unique identifier for the UI layout
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Layout deleted
      summary: Delete a specific UI layout
      tags:
      - ui:layouts
    get:
      description: Retrieve details for a specific layout profile by its unique identifier.
      parameters:
      - description: Unique identifier for the UI layout
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiLayout"
          description: Layout found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Layout not found
      summary: Retrieve a specific UI layout
      tags:
      - ui:layouts
    patch:
      description: Update a layout’s name or associated purpose tag.
      parameters:
      - description: Unique identifier for the UI layout
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiLayoutInput"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiLayout"
          description: Layout updated
      summary: Update a specific UI layout
      tags:
      - ui:layouts
  /ui/groups:
    get:
      description: Retrieve all reusable UI group definitions that segment layouts
        into labeled sections.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_ui_groups_get_200_response"
          description: List of UI groups
      summary: List all UI groups
      tags:
      - ui:groups
    post:
      description: Create a labeled section definition that can be reused across UI
        layouts.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiGroupInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiGroup"
          description: Group created
      summary: Create a new UI group
      tags:
      - ui:groups
  /ui/groups/{id}:
    delete:
      description: Permanently remove a UI group. Layouts using this group must be
        updated accordingly.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Group deleted
      summary: Delete a specific UI group
      tags:
      - ui:groups
    get:
      description: Retrieve details for a UI group including its name and associated
        layouts.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiGroup"
          description: Group found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Group not found
      summary: Retrieve a specific UI group
      tags:
      - ui:groups
    patch:
      description: Update the name or metadata for a UI group.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiGroupInput"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiGroup"
          description: Group updated
      summary: Update a specific UI group
      tags:
      - ui:groups
  /ui/fields:
    get:
      description: "Retrieve all field definitions that map contexts, categories,\
        \ and tags to specific sections in a layout."
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_ui_fields_get_200_response"
          description: List of UI fields
      summary: List all UI fields
      tags:
      - ui:fields
    post:
      description: Define a new UI field linking a tag or context to a specific layout
        group and sort order.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiFieldInput"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiField"
          description: UI field created
      summary: Create a new UI field
      tags:
      - ui:fields
  /ui/fields/{id}:
    delete:
      description: Permanently remove a field definition from the system.
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_tags__id__delete_200_response"
          description: Field deleted
      summary: Delete a specific UI field
      tags:
      - ui:fields
    get:
      description: "Retrieve details of a specific field, including its linked layout,\
        \ group, and context."
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiField"
          description: Field found
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Field not found
      summary: Retrieve a specific UI field
      tags:
      - ui:fields
    patch:
      description: "Modify the layout, group, or context linked to a UI field definition."
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UiFieldInput"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UiField"
          description: Field updated
      summary: Update a specific UI field
      tags:
      - ui:fields
components:
  parameters:
    TagId:
      description: Unique identifier for the tag
      explode: false
      in: path
      name: id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    EntityId:
      description: Unique identifier for the entity
      explode: false
      in: path
      name: id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    UiLayoutId:
      description: Unique identifier for the UI layout
      explode: false
      in: path
      name: id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    ContextId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    PartOfSpeechId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    RatingTypeId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    RatingId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    UiGroupId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    UiFieldId:
      explode: false
      in: path
      name: id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
  schemas:
    ErrorResponse:
      example:
        code: 404
        details: "{}"
        message: Resource not found
      properties:
        code:
          example: 404
          title: code
          type: integer
        message:
          example: Resource not found
          title: message
          type: string
        details:
          title: details
          type: object
      required:
      - code
      - message
      title: ErrorResponse
      type: object
    PaginatedResponse:
      properties:
        results:
          items: {}
          title: results
          type: array
        total:
          example: 42
          title: total
          type: integer
      title: PaginatedResponse
      type: object
    Tag:
      example:
        id: a123e456-78b9-4cde-8123-456789abcdef
        name: dog
        display_name: Dog
        metadata:
          source: Label Studio
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        display_name:
          type: string
        metadata:
          type: object
        part_of_speech_id:
          format: uuid
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      title: Tag
      type: object
    TagInput:
      example:
        metadata: "{}"
        name: name
        part_of_speech_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        display_name: display_name
      properties:
        name:
          title: name
          type: string
        display_name:
          title: display_name
          type: string
        metadata:
          title: metadata
          type: object
        part_of_speech_id:
          format: uuid
          title: part_of_speech_id
          type: string
      required:
      - name
      title: TagInput
      type: object
    TagAlias:
      description: |
        Represents an alias or synonym for a canonical tag.
        Each alias points to a tag via `tag_id`.
      example:
        name: name
        tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          title: id
          type: string
        name:
          title: name
          type: string
        tag_id:
          format: uuid
          title: tag_id
          type: string
      title: TagAlias
      type: object
    AliasUpdate:
      description: |
        Used for bulk-updating aliases for a tag. Each string value represents an alias name.
      example:
        aliases:
        - aliases
        - aliases
      properties:
        aliases:
          items:
            type: string
          title: aliases
          type: array
      title: AliasUpdate
      type: object
    TagRelationship:
      description: |
        Represents a directional relationship between two tags.
        `tag_a_id` is the source or dominant tag, and `tag_b_id` is the target or dependent tag.
      example:
        id: b123e456-78b9-4cde-8123-456789abcdef
        tag_a_id: 11111111-1111-1111-1111-111111111111
        tag_b_id: 22222222-2222-2222-2222-222222222222
        relationship_type_id: 33333333-3333-3333-3333-333333333333
        description: Vehicle is the parent of Car
      properties:
        id:
          format: uuid
          type: string
        tag_a_id:
          format: uuid
          type: string
        tag_b_id:
          format: uuid
          type: string
        relationship_type_id:
          format: uuid
          type: string
        description:
          type: string
      title: TagRelationship
      type: object
    TagRelationshipInput:
      description: |
        Input model for creating or updating a tag relationship.
        Used by both scoped (`/tags/{id}/relationships`) and global (`/tag-relationships`) endpoints.
      example:
        tag_b_id: 22222222-2222-2222-2222-222222222222
        relationship_type_id: 33333333-3333-3333-3333-333333333333
        description: Parent-child relationship
      properties:
        tag_b_id:
          format: uuid
          type: string
        relationship_type_id:
          format: uuid
          type: string
        description:
          type: string
      required:
      - relationship_type_id
      - tag_b_id
      title: TagRelationshipInput
      type: object
    RelationshipUpdate:
      description: |
        Bulk-update model for tag relationships.
        Used to update multiple relationships in a single request.
      example:
        relationships:
        - tag_b_id: 44444444-4444-4444-4444-444444444444
          relationship_type_id: 55555555-5555-5555-5555-555555555555
          description: Alternate version of
      properties:
        relationships:
          items:
            $ref: "#/components/schemas/TagRelationshipInput"
          type: array
      required:
      - relationships
      title: RelationshipUpdate
      type: object
    TagComponent:
      description: |
        Represents a single component within a composite tag.
        Links a **base tag** (composite phrase) to one of its **component tags**,
        with a defined order (`position`) indicating sequence in the phrase.
      example:
        id: b123e456-78b9-4cde-8123-456789abcdef
        base_tag_id: a123e456-78b9-4cde-8123-456789abcdef
        component_tag_id: c123e456-78b9-4cde-8123-456789abcdef
        position: 2
        created_at: 2025-10-07T12:00:00Z
        updated_at: 2025-10-07T12:30:00Z
      properties:
        id:
          description: Unique identifier for the composition record.
          format: uuid
          type: string
        base_tag_id:
          description: "The composite tag being formed (e.g., \"very big red car\"\
            )."
          format: uuid
          type: string
        component_tag_id:
          description: "The atomic tag being used as a component (e.g., \"big\")."
          format: uuid
          type: string
        position:
          description: |
            Order of the component tag within the composite phrase (1-based index).
          minimum: 1
          type: integer
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - base_tag_id
      - component_tag_id
      - id
      - position
      title: TagComponent
      type: object
    TagComponentInput:
      description: |
        Input model for adding a component to a composite tag.
        Used by both the scoped (`/tags/{id}/compositions`) and global (`/tag-compositions`) endpoints.
      example:
        component_tag_id: c123e456-78b9-4cde-8123-456789abcdef
        position: 3
      properties:
        component_tag_id:
          description: The component tag being added to the composition.
          format: uuid
          type: string
        position:
          description: Position of this component in the composite phrase (1-based
            index).
          minimum: 1
          type: integer
      required:
      - component_tag_id
      - position
      title: TagComponentInput
      type: object
    CompositionUpdate:
      description: |
        Bulk-update model for composite tag components.
        Replaces the full set of component tags for a base tag.
      example:
        components:
        - component_tag_id: 11111111-1111-1111-1111-111111111111
          position: 1
        - component_tag_id: 22222222-2222-2222-2222-222222222222
          position: 2
        - component_tag_id: 33333333-3333-3333-3333-333333333333
          position: 3
      properties:
        components:
          items:
            $ref: "#/components/schemas/TagComponentInput"
          type: array
      required:
      - components
      title: CompositionUpdate
      type: object
    Entity:
      example:
        metadata: "{}"
        is_primary: true
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        location: location
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          title: id
          type: string
        name:
          title: name
          type: string
        location:
          title: location
          type: string
        is_primary:
          title: is_primary
          type: boolean
        metadata:
          title: metadata
          type: object
        created_at:
          format: date-time
          title: created_at
          type: string
        updated_at:
          format: date-time
          title: updated_at
          type: string
      title: Entity
      type: object
    EntityInput:
      example:
        metadata: "{}"
        is_primary: true
        name: name
        location: location
      properties:
        name:
          title: name
          type: string
        location:
          title: location
          type: string
        is_primary:
          title: is_primary
          type: boolean
        metadata:
          title: metadata
          type: object
      required:
      - name
      title: EntityInput
      type: object
    EntityTagAssignment:
      example:
        metadata: "{}"
        context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tag:
          id: a123e456-78b9-4cde-8123-456789abcdef
          name: dog
          display_name: Dog
          metadata:
            source: Label Studio
      properties:
        tag:
          $ref: "#/components/schemas/Tag"
        context_id:
          format: uuid
          title: context_id
          type: string
        metadata:
          title: metadata
          type: object
      title: EntityTagAssignment
      type: object
    EntityTagAssignmentInput:
      example:
        metadata: "{}"
        tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        tag_id:
          format: uuid
          title: tag_id
          type: string
        context_id:
          format: uuid
          title: context_id
          type: string
        metadata:
          title: metadata
          type: object
      title: EntityTagAssignmentInput
      type: object
    EntityTagUpdate:
      example:
        tags:
        - metadata: "{}"
          tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - metadata: "{}"
          tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        tags:
          items:
            $ref: "#/components/schemas/EntityTagAssignmentInput"
          title: tags
          type: array
      title: EntityTagUpdate
      type: object
    EntityPurposeInput:
      example:
        is_primary: true
        purpose_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        purpose_tag_id:
          format: uuid
          title: purpose_tag_id
          type: string
        is_primary:
          title: is_primary
          type: boolean
      title: EntityPurposeInput
      type: object
    EntityPurposeUpdate:
      example:
        purposes:
        - is_primary: true
          purpose_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - is_primary: true
          purpose_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        purposes:
          items:
            $ref: "#/components/schemas/EntityPurposeInput"
          title: purposes
          type: array
      title: EntityPurposeUpdate
      type: object
    EntityRelationship:
      description: |
        Directionality semantics:
        - entity_a_id — source/primary entity
        - entity_b_id — alternate/derived entity
      example:
        relationship_type_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        entity_a_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        entity_a_id:
          format: uuid
          title: entity_a_id
          type: string
        entity_b_id:
          format: uuid
          title: entity_b_id
          type: string
        relationship_type_id:
          format: uuid
          title: relationship_type_id
          type: string
      title: EntityRelationship
      type: object
    EntityRelationshipInput:
      example:
        relationship_type_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        entity_b_id:
          format: uuid
          title: entity_b_id
          type: string
        relationship_type_id:
          format: uuid
          title: relationship_type_id
          type: string
      title: EntityRelationshipInput
      type: object
    EntityRelationshipUpdate:
      example:
        relationships:
        - relationship_type_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - relationship_type_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        relationships:
          items:
            $ref: "#/components/schemas/EntityRelationshipInput"
          title: relationships
          type: array
      title: EntityRelationshipUpdate
      type: object
    Context:
      example:
        id: 5c02a91e-7d4a-4f1e-9a91-0e4d2b5a20f8
        name: Clarity
        classification_type: subjective
        description: Used to evaluate the visual clarity of an image.
        is_active: true
      properties:
        id:
          format: uuid
          type: string
        name:
          description: "Unique name identifying the context (e.g., \"Style\", \"Mood\"\
            )."
          type: string
        classification_type:
          description: Defines whether the context represents objective or subjective
            evaluation criteria.
          enum:
          - objective
          - subjective
          type: string
        description:
          description: Optional explanatory text describing the purpose or meaning
            of the context.
          type: string
        is_active:
          description: Indicates whether this context is currently available for use.
          type: boolean
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      title: Context
      type: object
    ContextInput:
      example:
        is_active: true
        name: name
        description: description
        classification_type: objective
      properties:
        name:
          description: Name of the context to create or update.
          title: name
          type: string
        classification_type:
          description: Type of evaluation or classification this context represents.
          enum:
          - objective
          - subjective
          title: classification_type
          type: string
        description:
          description: Optional descriptive text about the context.
          title: description
          type: string
        is_active:
          description: Whether the context should be active after creation.
          title: is_active
          type: boolean
      required:
      - name
      title: ContextInput
      type: object
    PartOfSpeech:
      example:
        id: 2ef48d8b-bf7d-47b0-a928-5a4c3a95a71e
        name: adjective
        description: "Describes a noun or pronoun, typically expressing a quality\
          \ or attribute."
        is_active: true
      properties:
        id:
          format: uuid
          type: string
        name:
          description: "Name of the grammatical classification (e.g., \"noun\", \"\
            adjective\")."
          type: string
        description:
          description: Optional description explaining how this part of speech is
            used in tagging or composition.
          type: string
        is_active:
          description: Indicates whether this classification is active and available
            for use.
          type: boolean
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      title: PartOfSpeech
      type: object
    PartOfSpeechInput:
      example:
        is_active: true
        name: name
        description: description
      properties:
        name:
          description: Name of the grammatical classification.
          title: name
          type: string
        description:
          description: Description explaining the role of this part of speech.
          title: description
          type: string
        is_active:
          description: Whether this part of speech is active upon creation or update.
          title: is_active
          type: boolean
      required:
      - name
      title: PartOfSpeechInput
      type: object
    RatingType:
      example:
        id: 4fd9fbb2-0d7c-4d64-bcfa-b3f2e95b601e
        name: Clarity
        is_normalized: true
      properties:
        id:
          format: uuid
          type: string
        name:
          description: "Descriptive name for the rating category (e.g., \"Likeness\"\
            , \"Confidence\")."
          type: string
        is_normalized:
          description: Indicates whether scores under this type are normalized to
            a 0–1 or 1–10 scale.
          type: boolean
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      title: RatingType
      type: object
    RatingTypeInput:
      example:
        is_normalized: true
        name: name
      properties:
        name:
          description: Name of the rating type to create or update.
          title: name
          type: string
        is_normalized:
          description: Whether ratings of this type should use a normalized scale.
          title: is_normalized
          type: boolean
      required:
      - name
      title: RatingTypeInput
      type: object
    Rating:
      example:
        id: 9d1cc219-1a67-4df2-9b5a-dc0038b168f1
        name: 10/10
        score: 10
        description: Maximum clarity score.
        rating_type_id: 4fd9fbb2-0d7c-4d64-bcfa-b3f2e95b601e
      properties:
        id:
          format: uuid
          type: string
        name:
          description: "Label identifying the rating (e.g., \"Excellent\", \"9/10\"\
            )."
          type: string
        score:
          description: Numeric score associated with the rating.
          type: integer
        description:
          description: Optional descriptive text for the rating.
          type: string
        rating_type_id:
          description: Foreign key referencing the rating type this rating belongs
            to.
          format: uuid
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      title: Rating
      type: object
    RatingInput:
      example:
        score: 0
        name: name
        description: description
        rating_type_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        name:
          description: Label identifying the rating value.
          title: name
          type: string
        score:
          description: Numeric score associated with the rating.
          title: score
          type: integer
        description:
          description: Optional description of the rating’s meaning.
          title: description
          type: string
        rating_type_id:
          description: Identifier for the associated rating type.
          format: uuid
          title: rating_type_id
          type: string
      required:
      - name
      - rating_type_id
      title: RatingInput
      type: object
    TagContextualRatingInput:
      description: |
        Represents a rating applied to a tag within a specific context.
        Each contextual rating associates a tag with a context (e.g., "style", "emotion")
        and a rating (e.g., 9/10, "excellent").
      example:
        id: 44444444-4444-4444-4444-444444444444
        context_id: 55555555-5555-5555-5555-555555555555
        rating_id: 66666666-6666-6666-6666-666666666666
        user_id: 77777777-7777-7777-7777-777777777777
        created_at: 2025-10-07T12:00:00Z
        updated_at: 2025-10-07T12:30:00Z
      properties:
        id:
          description: Unique identifier for the contextual rating record.
          format: uuid
          type: string
        context_id:
          description: Context in which this rating applies.
          format: uuid
          type: string
        rating_id:
          description: Rating value or scale reference.
          format: uuid
          type: string
        user_id:
          description: Optional — identifies who applied the rating.
          format: uuid
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - context_id
      - rating_id
      title: TagContextualRatingInput
      type: object
    EntityContextualRatingInput:
      description: |
        Represents a contextual rating applied directly to an entity under a given context (e.g., "quality", "accuracy"). Mirrors `TagContextualRatingInput` but links to an entity.
      example:
        id: 7e6a2a09-b38a-43b1-8f1b-f20db2b99861
        context_id: 5c02a91e-7d4a-4f1e-9a91-0e4d2b5a20f8
        rating_id: 4fd9fbb2-0d7c-4d64-bcfa-b3f2e95b601e
        user_id: bd49d61c-06a8-4a17-94f3-8af3f17afc62
        created_at: 2025-10-07T12:00:00Z
        updated_at: 2025-10-07T12:30:00Z
      properties:
        id:
          description: Unique identifier for the entity rating record.
          format: uuid
          type: string
        context_id:
          description: Context in which this rating applies.
          format: uuid
          type: string
        rating_id:
          description: Rating value or scale reference.
          format: uuid
          type: string
        user_id:
          description: Optional — identifies who applied the rating.
          format: uuid
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - context_id
      - rating_id
      title: EntityContextualRatingInput
      type: object
    EntityContextualRatingUpdate:
      example:
        rating: 0.8008281904610115
        context: context
      properties:
        rating:
          description: Updated rating value
          title: rating
          type: number
        context:
          description: Context under which the rating applies
          title: context
          type: string
      required:
      - rating
      title: EntityContextualRatingUpdate
      type: object
    ContextualRatingUpdate:
      description: |
        Input model for applying or updating multiple contextual ratings for a tag.
        Used by `/tags/{id}/ratings` endpoints for bulk operations.
      example:
        contextual_ratings:
        - context_id: 55555555-5555-5555-5555-555555555555
          rating_id: 66666666-6666-6666-6666-666666666666
          user_id: 77777777-7777-7777-7777-777777777777
      properties:
        contextual_ratings:
          items:
            $ref: "#/components/schemas/TagContextualRatingInput"
          type: array
      required:
      - contextual_ratings
      title: ContextualRatingUpdate
      type: object
    TagRelationshipRatingInput:
      description: |
        Represents a rating applied to a relationship between two tags.
        Useful for scoring how relevant, clear, or strong a connection is between tags.
      example:
        id: 88888888-8888-8888-8888-888888888888
        tag_b_id: 99999999-9999-9999-9999-999999999999
        context_id: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
        rating_id: bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb
        created_at: 2025-10-07T12:00:00Z
        updated_at: 2025-10-07T12:30:00Z
      properties:
        id:
          description: Unique identifier for the relationship rating record.
          format: uuid
          type: string
        tag_b_id:
          description: The target tag (Tag B) in the relationship.
          format: uuid
          type: string
        context_id:
          description: Context in which the relationship is rated.
          format: uuid
          type: string
        rating_id:
          description: Rating applied to this relationship.
          format: uuid
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - context_id
      - rating_id
      - tag_b_id
      title: TagRelationshipRatingInput
      type: object
    EntityRelationshipRatingInput:
      description: |
        Represents a contextual rating applied to a relationship between two entities.
        Mirrors the structure of tag relationship ratings.
      example:
        rating_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updated_at: 2000-01-23T04:56:07.000+00:00
        entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        created_at: 2000-01-23T04:56:07.000+00:00
        context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          title: id
          type: string
        entity_b_id:
          description: The related or target entity (Entity B).
          format: uuid
          title: entity_b_id
          type: string
        context_id:
          description: The context under which this relationship was evaluated.
          format: uuid
          title: context_id
          type: string
        rating_id:
          description: The rating value applied to this relationship.
          format: uuid
          title: rating_id
          type: string
        created_at:
          format: date-time
          title: created_at
          type: string
        updated_at:
          format: date-time
          title: updated_at
          type: string
      title: EntityRelationshipRatingInput
      type: object
    EntityRelationshipRatingUpdate:
      description: Request body for creating or updating relationship ratings between
        entities.
      example:
        relationship_ratings:
        - rating_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updated_at: 2000-01-23T04:56:07.000+00:00
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          created_at: 2000-01-23T04:56:07.000+00:00
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - rating_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updated_at: 2000-01-23T04:56:07.000+00:00
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          created_at: 2000-01-23T04:56:07.000+00:00
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        relationship_ratings:
          items:
            $ref: "#/components/schemas/EntityRelationshipRatingInput"
          title: relationship_ratings
          type: array
      title: EntityRelationshipRatingUpdate
      type: object
    RelationshipRatingUpdate:
      description: |
        Bulk-update model for applying or updating multiple ratings on relationships.
        Used by `/tags/{id}/relationship_ratings` endpoints.
      example:
        relationship_ratings:
        - tag_b_id: 99999999-9999-9999-9999-999999999999
          context_id: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
          rating_id: bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb
      properties:
        relationship_ratings:
          items:
            $ref: "#/components/schemas/TagRelationshipRatingInput"
          type: array
      required:
      - relationship_ratings
      title: RelationshipRatingUpdate
      type: object
    UiLayout:
      description: A layout configuration profile defining how tags and fields are
        arranged in the UI.
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        purpose_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          title: id
          type: string
        purpose_tag_id:
          format: uuid
          nullable: true
          title: purpose_tag_id
          type: string
        name:
          title: name
          type: string
        created_at:
          format: date-time
          title: created_at
          type: string
        updated_at:
          format: date-time
          title: updated_at
          type: string
      title: UiLayout
      type: object
    UiLayoutInput:
      example:
        purpose_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
      properties:
        purpose_tag_id:
          format: uuid
          nullable: true
          title: purpose_tag_id
          type: string
        name:
          title: name
          type: string
      required:
      - name
      title: UiLayoutInput
      type: object
    UiGroup:
      description: A labeled section within a UI layout used to organize fields under
        a specific theme or purpose.
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          title: id
          type: string
        name:
          title: name
          type: string
        created_at:
          format: date-time
          title: created_at
          type: string
        updated_at:
          format: date-time
          title: updated_at
          type: string
      title: UiGroup
      type: object
    UiGroupInput:
      example:
        name: name
      properties:
        name:
          title: name
          type: string
      required:
      - name
      title: UiGroupInput
      type: object
    UiField:
      description: A field definition linking tags or contexts to a specific section
        of a layout.
      example:
        category_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updated_at: 2000-01-23T04:56:07.000+00:00
        ui_layout_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        created_at: 2000-01-23T04:56:07.000+00:00
        context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sort_order: 0
        ui_group_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          title: id
          type: string
        ui_layout_id:
          format: uuid
          title: ui_layout_id
          type: string
        ui_group_id:
          format: uuid
          title: ui_group_id
          type: string
        context_id:
          format: uuid
          title: context_id
          type: string
        category_tag_id:
          format: uuid
          title: category_tag_id
          type: string
        sort_order:
          title: sort_order
          type: integer
        created_at:
          format: date-time
          title: created_at
          type: string
        updated_at:
          format: date-time
          title: updated_at
          type: string
      title: UiField
      type: object
    UiFieldInput:
      example:
        category_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        ui_layout_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sort_order: 0
        ui_group_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        ui_layout_id:
          format: uuid
          title: ui_layout_id
          type: string
        ui_group_id:
          format: uuid
          title: ui_group_id
          type: string
        context_id:
          format: uuid
          title: context_id
          type: string
        category_tag_id:
          format: uuid
          title: category_tag_id
          type: string
        sort_order:
          title: sort_order
          type: integer
      required:
      - ui_group_id
      - ui_layout_id
      title: UiFieldInput
      type: object
    _meta_health_get_200_response:
      example:
        status: ok
      properties:
        status:
          example: ok
          title: status
          type: string
      title: _meta_health_get_200_response
      type: object
    _tags_get_200_response:
      allOf:
      - $ref: "#/components/schemas/PaginatedResponse"
      - properties:
          results:
            items:
              $ref: "#/components/schemas/Tag"
            type: array
        type: object
      example:
        total: 42
        results:
        - id: a123e456-78b9-4cde-8123-456789abcdef
          name: dog
          display_name: Dog
          metadata:
            source: Label Studio
        - id: a123e456-78b9-4cde-8123-456789abcdef
          name: dog
          display_name: Dog
          metadata:
            source: Label Studio
      title: _tags_get_200_response
    _tags__id__delete_200_response:
      example:
        status: deleted
      properties:
        status:
          example: deleted
          title: status
          type: string
      title: _tags__id__delete_200_response
      type: object
    _tags__id__aliases_get_200_response:
      example:
        aliases:
        - name: name
          tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - name: name
          tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        aliases:
          items:
            $ref: "#/components/schemas/TagAlias"
          title: aliases
          type: array
      title: _tags__id__aliases_get_200_response
      type: object
    _tags__id__aliases_post_request:
      properties:
        name:
          description: The alias name to create
          title: name
          type: string
      title: _tags__id__aliases_post_request
      type: object
    _tags__id__aliases_patch_200_response:
      example:
        aliases:
        - name: name
          tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - name: name
          tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        tag_id:
          format: uuid
          title: tag_id
          type: string
        aliases:
          items:
            $ref: "#/components/schemas/TagAlias"
          title: aliases
          type: array
      title: _tags__id__aliases_patch_200_response
      type: object
    _tags__id__aliases__alias_id__patch_request:
      properties:
        name:
          description: New alias name
          title: name
          type: string
        tag_id:
          description: Optional — new canonical tag this alias should reference
          format: uuid
          title: tag_id
          type: string
      title: _tags__id__aliases__alias_id__patch_request
      type: object
    _tag_aliases_post_request:
      properties:
        name:
          title: name
          type: string
        tag_id:
          format: uuid
          title: tag_id
          type: string
      title: _tag_aliases_post_request
      type: object
    _tags__id__relationships_get_200_response:
      example:
        relationships:
        - id: b123e456-78b9-4cde-8123-456789abcdef
          tag_a_id: 11111111-1111-1111-1111-111111111111
          tag_b_id: 22222222-2222-2222-2222-222222222222
          relationship_type_id: 33333333-3333-3333-3333-333333333333
          description: Vehicle is the parent of Car
        - id: b123e456-78b9-4cde-8123-456789abcdef
          tag_a_id: 11111111-1111-1111-1111-111111111111
          tag_b_id: 22222222-2222-2222-2222-222222222222
          relationship_type_id: 33333333-3333-3333-3333-333333333333
          description: Vehicle is the parent of Car
      properties:
        relationships:
          items:
            $ref: "#/components/schemas/TagRelationship"
          title: relationships
          type: array
      title: _tags__id__relationships_get_200_response
      type: object
    _tags__id__relationships__relationship_id__patch_request:
      properties:
        relationship_type_id:
          description: Updated relationship type
          format: uuid
          title: relationship_type_id
          type: string
        description:
          description: Optional new description of the relationship
          title: description
          type: string
      title: _tags__id__relationships__relationship_id__patch_request
      type: object
    _tag_relationships__id__patch_request:
      properties:
        relationship_type_id:
          format: uuid
          title: relationship_type_id
          type: string
        description:
          title: description
          type: string
      title: _tag_relationships__id__patch_request
      type: object
    _tags__id__compositions_get_200_response:
      example:
        base_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        components:
        - id: b123e456-78b9-4cde-8123-456789abcdef
          base_tag_id: a123e456-78b9-4cde-8123-456789abcdef
          component_tag_id: c123e456-78b9-4cde-8123-456789abcdef
          position: 2
          created_at: 2025-10-07T12:00:00Z
          updated_at: 2025-10-07T12:30:00Z
        - id: b123e456-78b9-4cde-8123-456789abcdef
          base_tag_id: a123e456-78b9-4cde-8123-456789abcdef
          component_tag_id: c123e456-78b9-4cde-8123-456789abcdef
          position: 2
          created_at: 2025-10-07T12:00:00Z
          updated_at: 2025-10-07T12:30:00Z
      properties:
        base_tag_id:
          format: uuid
          title: base_tag_id
          type: string
        components:
          items:
            $ref: "#/components/schemas/TagComponent"
          title: components
          type: array
      title: _tags__id__compositions_get_200_response
      type: object
    _tags__id__compositions__composition_id__patch_request:
      properties:
        position:
          description: Updated position of the component within the composite phrase
          minimum: 1
          title: position
          type: integer
      title: _tags__id__compositions__composition_id__patch_request
      type: object
    _tag_compositions_get_200_response:
      example:
        compositions:
        - id: b123e456-78b9-4cde-8123-456789abcdef
          base_tag_id: a123e456-78b9-4cde-8123-456789abcdef
          component_tag_id: c123e456-78b9-4cde-8123-456789abcdef
          position: 2
          created_at: 2025-10-07T12:00:00Z
          updated_at: 2025-10-07T12:30:00Z
        - id: b123e456-78b9-4cde-8123-456789abcdef
          base_tag_id: a123e456-78b9-4cde-8123-456789abcdef
          component_tag_id: c123e456-78b9-4cde-8123-456789abcdef
          position: 2
          created_at: 2025-10-07T12:00:00Z
          updated_at: 2025-10-07T12:30:00Z
      properties:
        compositions:
          items:
            $ref: "#/components/schemas/TagComponent"
          title: compositions
          type: array
      title: _tag_compositions_get_200_response
      type: object
    _tag_compositions_post_request:
      properties:
        base_tag_id:
          format: uuid
          title: base_tag_id
          type: string
        component_tag_id:
          format: uuid
          title: component_tag_id
          type: string
        position:
          description: Order of the component in the phrase (1-based)
          title: position
          type: integer
      title: _tag_compositions_post_request
      type: object
    _tag_compositions__id__patch_request:
      properties:
        position:
          title: position
          type: integer
      title: _tag_compositions__id__patch_request
      type: object
    _tags__id__ratings_get_200_response:
      example:
        ratings:
        - id: 44444444-4444-4444-4444-444444444444
          context_id: 55555555-5555-5555-5555-555555555555
          rating_id: 66666666-6666-6666-6666-666666666666
          user_id: 77777777-7777-7777-7777-777777777777
          created_at: 2025-10-07T12:00:00Z
          updated_at: 2025-10-07T12:30:00Z
        - id: 44444444-4444-4444-4444-444444444444
          context_id: 55555555-5555-5555-5555-555555555555
          rating_id: 66666666-6666-6666-6666-666666666666
          user_id: 77777777-7777-7777-7777-777777777777
          created_at: 2025-10-07T12:00:00Z
          updated_at: 2025-10-07T12:30:00Z
        tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        tag_id:
          format: uuid
          title: tag_id
          type: string
        ratings:
          items:
            $ref: "#/components/schemas/TagContextualRatingInput"
          title: ratings
          type: array
      title: _tags__id__ratings_get_200_response
      type: object
    _tags__id__relationship_ratings_get_200_response:
      example:
        relationship_ratings:
        - id: 88888888-8888-8888-8888-888888888888
          tag_b_id: 99999999-9999-9999-9999-999999999999
          context_id: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
          rating_id: bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb
          created_at: 2025-10-07T12:00:00Z
          updated_at: 2025-10-07T12:30:00Z
        - id: 88888888-8888-8888-8888-888888888888
          tag_b_id: 99999999-9999-9999-9999-999999999999
          context_id: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
          rating_id: bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb
          created_at: 2025-10-07T12:00:00Z
          updated_at: 2025-10-07T12:30:00Z
        tag_a_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        tag_a_id:
          format: uuid
          title: tag_a_id
          type: string
        relationship_ratings:
          items:
            $ref: "#/components/schemas/TagRelationshipRatingInput"
          title: relationship_ratings
          type: array
      title: _tags__id__relationship_ratings_get_200_response
      type: object
    _tags__id__relationship_ratings_patch_200_response:
      example:
        ratings:
        - id: 88888888-8888-8888-8888-888888888888
          tag_b_id: 99999999-9999-9999-9999-999999999999
          context_id: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
          rating_id: bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb
          created_at: 2025-10-07T12:00:00Z
          updated_at: 2025-10-07T12:30:00Z
        - id: 88888888-8888-8888-8888-888888888888
          tag_b_id: 99999999-9999-9999-9999-999999999999
          context_id: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
          rating_id: bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb
          created_at: 2025-10-07T12:00:00Z
          updated_at: 2025-10-07T12:30:00Z
        tag_a_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        tag_a_id:
          format: uuid
          title: tag_a_id
          type: string
        ratings:
          items:
            $ref: "#/components/schemas/TagRelationshipRatingInput"
          title: ratings
          type: array
      title: _tags__id__relationship_ratings_patch_200_response
      type: object
    _tags__id__relationship_ratings__rating_id__patch_request:
      properties:
        context_id:
          description: Updated context for this relationship rating
          format: uuid
          title: context_id
          type: string
        rating_id:
          description: Updated rating value for this relationship
          format: uuid
          title: rating_id
          type: string
      title: _tags__id__relationship_ratings__rating_id__patch_request
      type: object
    _entities_get_200_response:
      allOf:
      - $ref: "#/components/schemas/PaginatedResponse"
      - properties:
          results:
            items:
              $ref: "#/components/schemas/Entity"
            type: array
        type: object
      example:
        total: 42
        results:
        - metadata: "{}"
          is_primary: true
          updated_at: 2000-01-23T04:56:07.000+00:00
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          location: location
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - metadata: "{}"
          is_primary: true
          updated_at: 2000-01-23T04:56:07.000+00:00
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          location: location
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      title: _entities_get_200_response
    _entities__id__tags_get_200_response:
      example:
        tags:
        - metadata: "{}"
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tag:
            id: a123e456-78b9-4cde-8123-456789abcdef
            name: dog
            display_name: Dog
            metadata:
              source: Label Studio
        - metadata: "{}"
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tag:
            id: a123e456-78b9-4cde-8123-456789abcdef
            name: dog
            display_name: Dog
            metadata:
              source: Label Studio
      properties:
        tags:
          items:
            $ref: "#/components/schemas/EntityTagAssignment"
          title: tags
          type: array
      title: _entities__id__tags_get_200_response
      type: object
    _entities__id__tags_patch_200_response:
      example:
        entity_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tags:
        - metadata: "{}"
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tag:
            id: a123e456-78b9-4cde-8123-456789abcdef
            name: dog
            display_name: Dog
            metadata:
              source: Label Studio
        - metadata: "{}"
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tag:
            id: a123e456-78b9-4cde-8123-456789abcdef
            name: dog
            display_name: Dog
            metadata:
              source: Label Studio
      properties:
        entity_id:
          format: uuid
          title: entity_id
          type: string
        tags:
          items:
            $ref: "#/components/schemas/EntityTagAssignment"
          title: tags
          type: array
      title: _entities__id__tags_patch_200_response
      type: object
    _entities__id__tags__tag_id__delete_200_response:
      example:
        status: unassigned
      properties:
        status:
          example: unassigned
          title: status
          type: string
      title: _entities__id__tags__tag_id__delete_200_response
      type: object
    _entities__id__purposes_get_200_response:
      example:
        purposes:
        - is_primary: true
          purpose_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - is_primary: true
          purpose_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        purposes:
          items:
            $ref: "#/components/schemas/EntityPurposeInput"
          title: purposes
          type: array
      title: _entities__id__purposes_get_200_response
      type: object
    _entities__id__purposes_patch_200_response:
      example:
        purposes:
        - is_primary: true
          purpose_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - is_primary: true
          purpose_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        entity_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        entity_id:
          format: uuid
          title: entity_id
          type: string
        purposes:
          items:
            $ref: "#/components/schemas/EntityPurposeInput"
          title: purposes
          type: array
      title: _entities__id__purposes_patch_200_response
      type: object
    _entities__id__purposes__purpose_id__patch_request:
      properties:
        purpose_tag_id:
          description: Updated purpose tag reference.
          format: uuid
          title: purpose_tag_id
          type: string
        is_primary:
          description: Whether this purpose is the primary designation for the entity.
          title: is_primary
          type: boolean
      title: _entities__id__purposes__purpose_id__patch_request
      type: object
    _entities__id__versions_get_200_response:
      example:
        versions:
        - metadata: "{}"
          is_primary: true
          updated_at: 2000-01-23T04:56:07.000+00:00
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          location: location
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - metadata: "{}"
          is_primary: true
          updated_at: 2000-01-23T04:56:07.000+00:00
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          location: location
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        versions:
          items:
            $ref: "#/components/schemas/Entity"
          title: versions
          type: array
      title: _entities__id__versions_get_200_response
      type: object
    _entities__id__versions_patch_request_versions_inner:
      properties:
        entity_b_id:
          description: The related entity serving as a version.
          format: uuid
          title: entity_b_id
          type: string
        relationship_type_id:
          description: Identifier for the `"version-of"` relationship type.
          format: uuid
          title: relationship_type_id
          type: string
      title: _entities__id__versions_patch_request_versions_inner
      type: object
    _entities__id__versions_patch_request:
      properties:
        versions:
          description: List of related entity IDs that represent version links.
          items:
            $ref: "#/components/schemas/_entities__id__versions_patch_request_versions_inner"
          title: versions
          type: array
      title: _entities__id__versions_patch_request
      type: object
    _entities__id__versions_patch_200_response:
      example:
        versions:
        - relationship_type_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_a_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - relationship_type_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_a_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        entity_a_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        entity_a_id:
          format: uuid
          title: entity_a_id
          type: string
        versions:
          items:
            $ref: "#/components/schemas/EntityRelationship"
          title: versions
          type: array
      title: _entities__id__versions_patch_200_response
      type: object
    _entities__id__versions__version_id__patch_request:
      properties:
        relationship_type_id:
          description: "Updated relationship type ID, typically `\"version-of\"`."
          format: uuid
          title: relationship_type_id
          type: string
      title: _entities__id__versions__version_id__patch_request
      type: object
    _entities__id__ratings_get_200_response:
      example:
        ratings:
        - id: 7e6a2a09-b38a-43b1-8f1b-f20db2b99861
          context_id: 5c02a91e-7d4a-4f1e-9a91-0e4d2b5a20f8
          rating_id: 4fd9fbb2-0d7c-4d64-bcfa-b3f2e95b601e
          user_id: bd49d61c-06a8-4a17-94f3-8af3f17afc62
          created_at: 2025-10-07T12:00:00Z
          updated_at: 2025-10-07T12:30:00Z
        - id: 7e6a2a09-b38a-43b1-8f1b-f20db2b99861
          context_id: 5c02a91e-7d4a-4f1e-9a91-0e4d2b5a20f8
          rating_id: 4fd9fbb2-0d7c-4d64-bcfa-b3f2e95b601e
          user_id: bd49d61c-06a8-4a17-94f3-8af3f17afc62
          created_at: 2025-10-07T12:00:00Z
          updated_at: 2025-10-07T12:30:00Z
      properties:
        ratings:
          items:
            $ref: "#/components/schemas/EntityContextualRatingInput"
          title: ratings
          type: array
      title: _entities__id__ratings_get_200_response
      type: object
    _entities__id__ratings_patch_200_response:
      example:
        ratings:
        - id: 7e6a2a09-b38a-43b1-8f1b-f20db2b99861
          context_id: 5c02a91e-7d4a-4f1e-9a91-0e4d2b5a20f8
          rating_id: 4fd9fbb2-0d7c-4d64-bcfa-b3f2e95b601e
          user_id: bd49d61c-06a8-4a17-94f3-8af3f17afc62
          created_at: 2025-10-07T12:00:00Z
          updated_at: 2025-10-07T12:30:00Z
        - id: 7e6a2a09-b38a-43b1-8f1b-f20db2b99861
          context_id: 5c02a91e-7d4a-4f1e-9a91-0e4d2b5a20f8
          rating_id: 4fd9fbb2-0d7c-4d64-bcfa-b3f2e95b601e
          user_id: bd49d61c-06a8-4a17-94f3-8af3f17afc62
          created_at: 2025-10-07T12:00:00Z
          updated_at: 2025-10-07T12:30:00Z
        entity_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        entity_id:
          format: uuid
          title: entity_id
          type: string
        ratings:
          items:
            $ref: "#/components/schemas/EntityContextualRatingInput"
          title: ratings
          type: array
      title: _entities__id__ratings_patch_200_response
      type: object
    _entities__id__ratings__rating_id__patch_request:
      properties:
        context_id:
          description: Updated context for this rating record.
          format: uuid
          title: context_id
          type: string
        rating_id:
          description: Updated rating value applied to this entity.
          format: uuid
          title: rating_id
          type: string
      title: _entities__id__ratings__rating_id__patch_request
      type: object
    _entities__id__relationships_get_200_response:
      example:
        relationships:
        - relationship_type_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_a_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - relationship_type_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_a_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        relationships:
          items:
            $ref: "#/components/schemas/EntityRelationship"
          title: relationships
          type: array
      title: _entities__id__relationships_get_200_response
      type: object
    _entities__id__relationships_patch_200_response:
      example:
        relationships:
        - relationship_type_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_a_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - relationship_type_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_a_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        entity_a_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        entity_a_id:
          format: uuid
          title: entity_a_id
          type: string
        relationships:
          items:
            $ref: "#/components/schemas/EntityRelationship"
          title: relationships
          type: array
      title: _entities__id__relationships_patch_200_response
      type: object
    _entities__id__relationships__relationship_id__patch_request:
      properties:
        relationship_type_id:
          description: Updated relationship type
          format: uuid
          title: relationship_type_id
          type: string
      title: _entities__id__relationships__relationship_id__patch_request
      type: object
    _entities__id__relationship_ratings_get_200_response:
      example:
        relationship_ratings:
        - rating_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updated_at: 2000-01-23T04:56:07.000+00:00
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          created_at: 2000-01-23T04:56:07.000+00:00
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - rating_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updated_at: 2000-01-23T04:56:07.000+00:00
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          created_at: 2000-01-23T04:56:07.000+00:00
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        relationship_ratings:
          items:
            $ref: "#/components/schemas/EntityRelationshipRatingInput"
          title: relationship_ratings
          type: array
      title: _entities__id__relationship_ratings_get_200_response
      type: object
    _entities__id__relationship_ratings_patch_200_response:
      example:
        entity_a_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        relationship_ratings:
        - rating_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updated_at: 2000-01-23T04:56:07.000+00:00
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          created_at: 2000-01-23T04:56:07.000+00:00
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - rating_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updated_at: 2000-01-23T04:56:07.000+00:00
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          created_at: 2000-01-23T04:56:07.000+00:00
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        entity_a_id:
          format: uuid
          title: entity_a_id
          type: string
        relationship_ratings:
          items:
            $ref: "#/components/schemas/EntityRelationshipRatingInput"
          title: relationship_ratings
          type: array
      title: _entities__id__relationship_ratings_patch_200_response
      type: object
    _entity_versions_get_200_response:
      example:
        versions:
        - relationship_type_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_a_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - relationship_type_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_b_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          entity_a_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        versions:
          items:
            $ref: "#/components/schemas/EntityRelationship"
          title: versions
          type: array
      title: _entity_versions_get_200_response
      type: object
    _contexts_get_200_response:
      example:
        contexts:
        - id: 5c02a91e-7d4a-4f1e-9a91-0e4d2b5a20f8
          name: Clarity
          classification_type: subjective
          description: Used to evaluate the visual clarity of an image.
          is_active: true
        - id: 5c02a91e-7d4a-4f1e-9a91-0e4d2b5a20f8
          name: Clarity
          classification_type: subjective
          description: Used to evaluate the visual clarity of an image.
          is_active: true
      properties:
        contexts:
          items:
            $ref: "#/components/schemas/Context"
          title: contexts
          type: array
      title: _contexts_get_200_response
      type: object
    _parts_of_speech_get_200_response:
      example:
        parts_of_speech:
        - id: 2ef48d8b-bf7d-47b0-a928-5a4c3a95a71e
          name: adjective
          description: "Describes a noun or pronoun, typically expressing a quality\
            \ or attribute."
          is_active: true
        - id: 2ef48d8b-bf7d-47b0-a928-5a4c3a95a71e
          name: adjective
          description: "Describes a noun or pronoun, typically expressing a quality\
            \ or attribute."
          is_active: true
      properties:
        parts_of_speech:
          items:
            $ref: "#/components/schemas/PartOfSpeech"
          title: parts_of_speech
          type: array
      title: _parts_of_speech_get_200_response
      type: object
    _ratings_get_200_response:
      example:
        ratings:
        - id: 9d1cc219-1a67-4df2-9b5a-dc0038b168f1
          name: 10/10
          score: 10
          description: Maximum clarity score.
          rating_type_id: 4fd9fbb2-0d7c-4d64-bcfa-b3f2e95b601e
        - id: 9d1cc219-1a67-4df2-9b5a-dc0038b168f1
          name: 10/10
          score: 10
          description: Maximum clarity score.
          rating_type_id: 4fd9fbb2-0d7c-4d64-bcfa-b3f2e95b601e
      properties:
        ratings:
          items:
            $ref: "#/components/schemas/Rating"
          title: ratings
          type: array
      title: _ratings_get_200_response
      type: object
    _rating_types_get_200_response:
      example:
        rating_types:
        - id: 4fd9fbb2-0d7c-4d64-bcfa-b3f2e95b601e
          name: Clarity
          is_normalized: true
        - id: 4fd9fbb2-0d7c-4d64-bcfa-b3f2e95b601e
          name: Clarity
          is_normalized: true
      properties:
        rating_types:
          items:
            $ref: "#/components/schemas/RatingType"
          title: rating_types
          type: array
      title: _rating_types_get_200_response
      type: object
    _ui_layouts_get_200_response:
      example:
        ui_layouts:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          purpose_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - updated_at: 2000-01-23T04:56:07.000+00:00
          purpose_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        ui_layouts:
          items:
            $ref: "#/components/schemas/UiLayout"
          title: ui_layouts
          type: array
      title: _ui_layouts_get_200_response
      type: object
    _ui_groups_get_200_response:
      example:
        ui_groups:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - updated_at: 2000-01-23T04:56:07.000+00:00
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        ui_groups:
          items:
            $ref: "#/components/schemas/UiGroup"
          title: ui_groups
          type: array
      title: _ui_groups_get_200_response
      type: object
    _ui_fields_get_200_response:
      example:
        ui_fields:
        - category_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updated_at: 2000-01-23T04:56:07.000+00:00
          ui_layout_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          created_at: 2000-01-23T04:56:07.000+00:00
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sort_order: 0
          ui_group_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - category_tag_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updated_at: 2000-01-23T04:56:07.000+00:00
          ui_layout_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          created_at: 2000-01-23T04:56:07.000+00:00
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sort_order: 0
          ui_group_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        ui_fields:
          items:
            $ref: "#/components/schemas/UiField"
          title: ui_fields
          type: array
      title: _ui_fields_get_200_response
      type: object
x-tagGroups:
- name: Meta
  tags:
  - meta
- name: Tags
  tags:
  - tags:core
  - tags:aliases
  - tags:aliases:system
  - tags:relationships
  - tags:relationships:system
  - tags:compositions
  - tags:compositions:system
  - tags:ratings
  - tags:relationship_ratings
  - tags:relationship_ratings:system
- name: Entities
  tags:
  - entities:core
  - entities:tags
  - entities:relationships
  - entities:relationships:system
  - entities:relationship_ratings
  - entities:relationship_ratings:system
  - entities:ratings
  - entities:ratings:system
  - entities:purposes
  - entities:purposes:system
  - entities:versions
  - entities:versions:system
- name: Utilities
  tags:
  - utilities:part-of-speech
  - utilities:contexts
  - utilities:ratings:system
- name: UI
  tags:
  - ui:layouts
  - ui:groups
  - ui:fields
