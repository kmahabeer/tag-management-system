# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-10-08T05:04:13+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, conint


class ErrorResponse(BaseModel):
    code: int = Field(..., example=404)
    message: str = Field(..., example='Resource not found')
    details: Optional[Dict[str, Any]] = None


class PaginatedResponse(BaseModel):
    results: Optional[List] = None
    total: Optional[int] = Field(None, example=42)


class Tag(BaseModel):
    id: Optional[UUID] = None
    name: Optional[str] = None
    display_name: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    part_of_speech_id: Optional[UUID] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class TagInput(BaseModel):
    name: str
    display_name: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    part_of_speech_id: Optional[UUID] = None


class TagAlias(BaseModel):
    """
    Represents an alias or synonym for a canonical tag.
    Each alias points to a tag via `tag_id`.

    """

    id: Optional[UUID] = None
    name: Optional[str] = None
    tag_id: Optional[UUID] = None


class AliasUpdate(BaseModel):
    """
    Used for bulk-updating aliases for a tag. Each string value represents an alias name.

    """

    aliases: Optional[List[str]] = None


class TagRelationship(BaseModel):
    """
    Represents a directional relationship between two tags.
    `tag_a_id` is the source or dominant tag, and `tag_b_id` is the target or dependent tag.

    """

    id: Optional[UUID] = None
    tag_a_id: Optional[UUID] = None
    tag_b_id: Optional[UUID] = None
    relationship_type_id: Optional[UUID] = None
    description: Optional[str] = None


class TagRelationshipInput(BaseModel):
    """
    Input model for creating or updating a tag relationship.
    Used by both scoped (`/tags/{id}/relationships`) and global (`/tag-relationships`) endpoints.

    """

    tag_b_id: UUID
    relationship_type_id: UUID
    description: Optional[str] = None


class RelationshipUpdate(BaseModel):
    """
    Bulk-update model for tag relationships.
    Used to update multiple relationships in a single request.

    """

    relationships: List[TagRelationshipInput]


class TagComponent(BaseModel):
    """
    Represents a single component within a composite tag.
    Links a **base tag** (composite phrase) to one of its **component tags**,
    with a defined order (`position`) indicating sequence in the phrase.

    """

    id: UUID = Field(..., description='Unique identifier for the composition record.')
    base_tag_id: UUID = Field(
        ..., description='The composite tag being formed (e.g., "very big red car").'
    )
    component_tag_id: UUID = Field(
        ..., description='The atomic tag being used as a component (e.g., "big").'
    )
    position: conint(ge=1) = Field(
        ...,
        description='Order of the component tag within the composite phrase (1-based index).\n',
    )
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class TagComponentInput(BaseModel):
    """
    Input model for adding a component to a composite tag.
    Used by both the scoped (`/tags/{id}/compositions`) and global (`/tag-compositions`) endpoints.

    """

    component_tag_id: UUID = Field(
        ..., description='The component tag being added to the composition.'
    )
    position: conint(ge=1) = Field(
        ...,
        description='Position of this component in the composite phrase (1-based index).',
    )


class CompositionUpdate(BaseModel):
    """
    Bulk-update model for composite tag components.
    Replaces the full set of component tags for a base tag.

    """

    components: List[TagComponentInput]


class Entity(BaseModel):
    id: Optional[UUID] = None
    name: Optional[str] = None
    location: Optional[str] = None
    is_primary: Optional[bool] = None
    metadata: Optional[Dict[str, Any]] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class EntityInput(BaseModel):
    name: str
    location: Optional[str] = None
    is_primary: Optional[bool] = None
    metadata: Optional[Dict[str, Any]] = None


class EntityTagAssignment(BaseModel):
    tag: Optional[Tag] = None
    context_id: Optional[UUID] = None
    metadata: Optional[Dict[str, Any]] = None


class EntityTagAssignmentInput(BaseModel):
    tag_id: Optional[UUID] = None
    context_id: Optional[UUID] = None
    metadata: Optional[Dict[str, Any]] = None


class EntityTagUpdate(BaseModel):
    tags: Optional[List[EntityTagAssignmentInput]] = None


class EntityPurposeInput(BaseModel):
    purpose_tag_id: Optional[UUID] = None
    is_primary: Optional[bool] = None


class EntityPurposeUpdate(BaseModel):
    purposes: Optional[List[EntityPurposeInput]] = None


class EntityRelationship(BaseModel):
    """
    Directionality semantics:
    - entity_a_id — source/primary entity
    - entity_b_id — alternate/derived entity

    """

    entity_a_id: Optional[UUID] = None
    entity_b_id: Optional[UUID] = None
    relationship_type_id: Optional[UUID] = None


class EntityRelationshipInput(BaseModel):
    entity_b_id: Optional[UUID] = None
    relationship_type_id: Optional[UUID] = None


class EntityRelationshipUpdate(BaseModel):
    relationships: Optional[List[EntityRelationshipInput]] = None


class ClassificationType(Enum):
    """
    Defines whether the context represents objective or subjective evaluation criteria.
    """

    objective = 'objective'
    subjective = 'subjective'


class Context(BaseModel):
    id: Optional[UUID] = None
    name: Optional[str] = Field(
        None, description='Unique name identifying the context (e.g., "Style", "Mood").'
    )
    classification_type: Optional[ClassificationType] = Field(
        None,
        description='Defines whether the context represents objective or subjective evaluation criteria.',
    )
    description: Optional[str] = Field(
        None,
        description='Optional explanatory text describing the purpose or meaning of the context.',
    )
    is_active: Optional[bool] = Field(
        None,
        description='Indicates whether this context is currently available for use.',
    )
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class ClassificationType1(Enum):
    """
    Type of evaluation or classification this context represents.
    """

    objective = 'objective'
    subjective = 'subjective'


class ContextInput(BaseModel):
    name: str = Field(..., description='Name of the context to create or update.')
    classification_type: Optional[ClassificationType1] = Field(
        None,
        description='Type of evaluation or classification this context represents.',
    )
    description: Optional[str] = Field(
        None, description='Optional descriptive text about the context.'
    )
    is_active: Optional[bool] = Field(
        None, description='Whether the context should be active after creation.'
    )


class PartOfSpeech(BaseModel):
    id: Optional[UUID] = None
    name: Optional[str] = Field(
        None,
        description='Name of the grammatical classification (e.g., "noun", "adjective").',
    )
    description: Optional[str] = Field(
        None,
        description='Optional description explaining how this part of speech is used in tagging or composition.',
    )
    is_active: Optional[bool] = Field(
        None,
        description='Indicates whether this classification is active and available for use.',
    )
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class PartOfSpeechInput(BaseModel):
    name: str = Field(..., description='Name of the grammatical classification.')
    description: Optional[str] = Field(
        None, description='Description explaining the role of this part of speech.'
    )
    is_active: Optional[bool] = Field(
        None,
        description='Whether this part of speech is active upon creation or update.',
    )


class RatingType(BaseModel):
    id: Optional[UUID] = None
    name: Optional[str] = Field(
        None,
        description='Descriptive name for the rating category (e.g., "Likeness", "Confidence").',
    )
    is_normalized: Optional[bool] = Field(
        None,
        description='Indicates whether scores under this type are normalized to a 0–1 or 1–10 scale.',
    )
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class RatingTypeInput(BaseModel):
    name: str = Field(..., description='Name of the rating type to create or update.')
    is_normalized: Optional[bool] = Field(
        None, description='Whether ratings of this type should use a normalized scale.'
    )


class Rating(BaseModel):
    id: Optional[UUID] = None
    name: Optional[str] = Field(
        None, description='Label identifying the rating (e.g., "Excellent", "9/10").'
    )
    score: Optional[int] = Field(
        None, description='Numeric score associated with the rating.'
    )
    description: Optional[str] = Field(
        None, description='Optional descriptive text for the rating.'
    )
    rating_type_id: Optional[UUID] = Field(
        None,
        description='Foreign key referencing the rating type this rating belongs to.',
    )
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class RatingInput(BaseModel):
    name: str = Field(..., description='Label identifying the rating value.')
    score: Optional[int] = Field(
        None, description='Numeric score associated with the rating.'
    )
    description: Optional[str] = Field(
        None, description='Optional description of the rating’s meaning.'
    )
    rating_type_id: UUID = Field(
        ..., description='Identifier for the associated rating type.'
    )


class TagContextualRatingInput(BaseModel):
    """
    Represents a rating applied to a tag within a specific context.
    Each contextual rating associates a tag with a context (e.g., "style", "emotion")
    and a rating (e.g., 9/10, "excellent").

    """

    id: Optional[UUID] = Field(
        None, description='Unique identifier for the contextual rating record.'
    )
    context_id: UUID = Field(..., description='Context in which this rating applies.')
    rating_id: UUID = Field(..., description='Rating value or scale reference.')
    user_id: Optional[UUID] = Field(
        None, description='Optional — identifies who applied the rating.'
    )
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class EntityContextualRatingInput(BaseModel):
    """
    Represents a contextual rating applied directly to an entity under a given context (e.g., "quality", "accuracy"). Mirrors `TagContextualRatingInput` but links to an entity.

    """

    id: Optional[UUID] = Field(
        None, description='Unique identifier for the entity rating record.'
    )
    context_id: UUID = Field(..., description='Context in which this rating applies.')
    rating_id: UUID = Field(..., description='Rating value or scale reference.')
    user_id: Optional[UUID] = Field(
        None, description='Optional — identifies who applied the rating.'
    )
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class EntityContextualRatingUpdate(BaseModel):
    rating: float = Field(..., description='Updated rating value')
    context: Optional[str] = Field(
        None, description='Context under which the rating applies'
    )


class ContextualRatingUpdate(BaseModel):
    """
    Input model for applying or updating multiple contextual ratings for a tag.
    Used by `/tags/{id}/ratings` endpoints for bulk operations.

    """

    contextual_ratings: List[TagContextualRatingInput]


class TagRelationshipRatingInput(BaseModel):
    """
    Represents a rating applied to a relationship between two tags.
    Useful for scoring how relevant, clear, or strong a connection is between tags.

    """

    id: Optional[UUID] = Field(
        None, description='Unique identifier for the relationship rating record.'
    )
    tag_b_id: UUID = Field(
        ..., description='The target tag (Tag B) in the relationship.'
    )
    context_id: UUID = Field(
        ..., description='Context in which the relationship is rated.'
    )
    rating_id: UUID = Field(..., description='Rating applied to this relationship.')
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class EntityRelationshipRatingInput(BaseModel):
    """
    Represents a contextual rating applied to a relationship between two entities.
    Mirrors the structure of tag relationship ratings.

    """

    id: Optional[UUID] = None
    entity_b_id: Optional[UUID] = Field(
        None, description='The related or target entity (Entity B).'
    )
    context_id: Optional[UUID] = Field(
        None, description='The context under which this relationship was evaluated.'
    )
    rating_id: Optional[UUID] = Field(
        None, description='The rating value applied to this relationship.'
    )
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class EntityRelationshipRatingUpdate(BaseModel):
    """
    Request body for creating or updating relationship ratings between entities.
    """

    relationship_ratings: Optional[List[EntityRelationshipRatingInput]] = None


class RelationshipRatingUpdate(BaseModel):
    """
    Bulk-update model for applying or updating multiple ratings on relationships.
    Used by `/tags/{id}/relationship_ratings` endpoints.

    """

    relationship_ratings: List[TagRelationshipRatingInput]


class UiLayout(BaseModel):
    """
    A layout configuration profile defining how tags and fields are arranged in the UI.
    """

    id: Optional[UUID] = None
    purpose_tag_id: Optional[UUID] = None
    name: Optional[str] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class UiLayoutInput(BaseModel):
    purpose_tag_id: Optional[UUID] = None
    name: str


class UiGroup(BaseModel):
    """
    A labeled section within a UI layout used to organize fields under a specific theme or purpose.
    """

    id: Optional[UUID] = None
    name: Optional[str] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class UiGroupInput(BaseModel):
    name: str


class UiField(BaseModel):
    """
    A field definition linking tags or contexts to a specific section of a layout.
    """

    id: Optional[UUID] = None
    ui_layout_id: Optional[UUID] = None
    ui_group_id: Optional[UUID] = None
    context_id: Optional[UUID] = None
    category_tag_id: Optional[UUID] = None
    sort_order: Optional[int] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class UiFieldInput(BaseModel):
    ui_layout_id: UUID
    ui_group_id: UUID
    context_id: Optional[UUID] = None
    category_tag_id: Optional[UUID] = None
    sort_order: Optional[int] = None
